/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['log4js.js']) {
  _$jscoverage['log4js.js'] = [];
  _$jscoverage['log4js.js'][47] = 0;
  _$jscoverage['log4js.js'][66] = 0;
  _$jscoverage['log4js.js'][69] = 0;
  _$jscoverage['log4js.js'][70] = 0;
  _$jscoverage['log4js.js'][73] = 0;
  _$jscoverage['log4js.js'][74] = 0;
  _$jscoverage['log4js.js'][76] = 0;
  _$jscoverage['log4js.js'][77] = 0;
  _$jscoverage['log4js.js'][78] = 0;
  _$jscoverage['log4js.js'][79] = 0;
  _$jscoverage['log4js.js'][80] = 0;
  _$jscoverage['log4js.js'][83] = 0;
  _$jscoverage['log4js.js'][84] = 0;
  _$jscoverage['log4js.js'][85] = 0;
  _$jscoverage['log4js.js'][86] = 0;
  _$jscoverage['log4js.js'][91] = 0;
  _$jscoverage['log4js.js'][97] = 0;
  _$jscoverage['log4js.js'][98] = 0;
  _$jscoverage['log4js.js'][99] = 0;
  _$jscoverage['log4js.js'][100] = 0;
  _$jscoverage['log4js.js'][101] = 0;
  _$jscoverage['log4js.js'][104] = 0;
  _$jscoverage['log4js.js'][105] = 0;
  _$jscoverage['log4js.js'][108] = 0;
  _$jscoverage['log4js.js'][109] = 0;
  _$jscoverage['log4js.js'][110] = 0;
  _$jscoverage['log4js.js'][112] = 0;
  _$jscoverage['log4js.js'][114] = 0;
  _$jscoverage['log4js.js'][115] = 0;
  _$jscoverage['log4js.js'][116] = 0;
  _$jscoverage['log4js.js'][117] = 0;
  _$jscoverage['log4js.js'][120] = 0;
  _$jscoverage['log4js.js'][121] = 0;
  _$jscoverage['log4js.js'][126] = 0;
  _$jscoverage['log4js.js'][127] = 0;
  _$jscoverage['log4js.js'][128] = 0;
  _$jscoverage['log4js.js'][129] = 0;
  _$jscoverage['log4js.js'][130] = 0;
  _$jscoverage['log4js.js'][135] = 0;
  _$jscoverage['log4js.js'][136] = 0;
  _$jscoverage['log4js.js'][137] = 0;
  _$jscoverage['log4js.js'][138] = 0;
  _$jscoverage['log4js.js'][139] = 0;
  _$jscoverage['log4js.js'][140] = 0;
  _$jscoverage['log4js.js'][141] = 0;
  _$jscoverage['log4js.js'][142] = 0;
  _$jscoverage['log4js.js'][143] = 0;
  _$jscoverage['log4js.js'][144] = 0;
  _$jscoverage['log4js.js'][146] = 0;
  _$jscoverage['log4js.js'][150] = 0;
  _$jscoverage['log4js.js'][154] = 0;
  _$jscoverage['log4js.js'][155] = 0;
  _$jscoverage['log4js.js'][156] = 0;
  _$jscoverage['log4js.js'][157] = 0;
  _$jscoverage['log4js.js'][158] = 0;
  _$jscoverage['log4js.js'][162] = 0;
  _$jscoverage['log4js.js'][163] = 0;
  _$jscoverage['log4js.js'][164] = 0;
  _$jscoverage['log4js.js'][179] = 0;
  _$jscoverage['log4js.js'][180] = 0;
  _$jscoverage['log4js.js'][181] = 0;
  _$jscoverage['log4js.js'][182] = 0;
  _$jscoverage['log4js.js'][183] = 0;
  _$jscoverage['log4js.js'][184] = 0;
  _$jscoverage['log4js.js'][194] = 0;
  _$jscoverage['log4js.js'][195] = 0;
  _$jscoverage['log4js.js'][197] = 0;
  _$jscoverage['log4js.js'][198] = 0;
  _$jscoverage['log4js.js'][201] = 0;
  _$jscoverage['log4js.js'][203] = 0;
  _$jscoverage['log4js.js'][204] = 0;
  _$jscoverage['log4js.js'][207] = 0;
  _$jscoverage['log4js.js'][208] = 0;
  _$jscoverage['log4js.js'][211] = 0;
  _$jscoverage['log4js.js'][212] = 0;
  _$jscoverage['log4js.js'][215] = 0;
  _$jscoverage['log4js.js'][218] = 0;
  _$jscoverage['log4js.js'][219] = 0;
  _$jscoverage['log4js.js'][222] = 0;
  _$jscoverage['log4js.js'][224] = 0;
  _$jscoverage['log4js.js'][225] = 0;
  _$jscoverage['log4js.js'][226] = 0;
  _$jscoverage['log4js.js'][229] = 0;
  _$jscoverage['log4js.js'][230] = 0;
  _$jscoverage['log4js.js'][231] = 0;
  _$jscoverage['log4js.js'][232] = 0;
  _$jscoverage['log4js.js'][233] = 0;
  _$jscoverage['log4js.js'][239] = 0;
  _$jscoverage['log4js.js'][240] = 0;
  _$jscoverage['log4js.js'][248] = 0;
  _$jscoverage['log4js.js'][249] = 0;
  _$jscoverage['log4js.js'][252] = 0;
  _$jscoverage['log4js.js'][253] = 0;
  _$jscoverage['log4js.js'][254] = 0;
  _$jscoverage['log4js.js'][255] = 0;
  _$jscoverage['log4js.js'][258] = 0;
  _$jscoverage['log4js.js'][261] = 0;
  _$jscoverage['log4js.js'][264] = 0;
  _$jscoverage['log4js.js'][266] = 0;
  _$jscoverage['log4js.js'][267] = 0;
  _$jscoverage['log4js.js'][268] = 0;
  _$jscoverage['log4js.js'][270] = 0;
  _$jscoverage['log4js.js'][271] = 0;
  _$jscoverage['log4js.js'][272] = 0;
  _$jscoverage['log4js.js'][274] = 0;
  _$jscoverage['log4js.js'][277] = 0;
  _$jscoverage['log4js.js'][278] = 0;
  _$jscoverage['log4js.js'][279] = 0;
  _$jscoverage['log4js.js'][280] = 0;
  _$jscoverage['log4js.js'][281] = 0;
  _$jscoverage['log4js.js'][283] = 0;
  _$jscoverage['log4js.js'][284] = 0;
  _$jscoverage['log4js.js'][286] = 0;
  _$jscoverage['log4js.js'][289] = 0;
  _$jscoverage['log4js.js'][294] = 0;
  _$jscoverage['log4js.js'][295] = 0;
  _$jscoverage['log4js.js'][297] = 0;
  _$jscoverage['log4js.js'][299] = 0;
  _$jscoverage['log4js.js'][301] = 0;
  _$jscoverage['log4js.js'][302] = 0;
  _$jscoverage['log4js.js'][304] = 0;
  _$jscoverage['log4js.js'][305] = 0;
  _$jscoverage['log4js.js'][307] = 0;
  _$jscoverage['log4js.js'][308] = 0;
  _$jscoverage['log4js.js'][309] = 0;
  _$jscoverage['log4js.js'][312] = 0;
  _$jscoverage['log4js.js'][316] = 0;
  _$jscoverage['log4js.js'][317] = 0;
  _$jscoverage['log4js.js'][318] = 0;
  _$jscoverage['log4js.js'][319] = 0;
  _$jscoverage['log4js.js'][321] = 0;
  _$jscoverage['log4js.js'][322] = 0;
  _$jscoverage['log4js.js'][325] = 0;
  _$jscoverage['log4js.js'][326] = 0;
  _$jscoverage['log4js.js'][327] = 0;
  _$jscoverage['log4js.js'][328] = 0;
  _$jscoverage['log4js.js'][329] = 0;
  _$jscoverage['log4js.js'][330] = 0;
  _$jscoverage['log4js.js'][332] = 0;
  _$jscoverage['log4js.js'][334] = 0;
  _$jscoverage['log4js.js'][335] = 0;
  _$jscoverage['log4js.js'][336] = 0;
  _$jscoverage['log4js.js'][338] = 0;
  _$jscoverage['log4js.js'][342] = 0;
  _$jscoverage['log4js.js'][343] = 0;
  _$jscoverage['log4js.js'][344] = 0;
  _$jscoverage['log4js.js'][345] = 0;
  _$jscoverage['log4js.js'][348] = 0;
  _$jscoverage['log4js.js'][349] = 0;
  _$jscoverage['log4js.js'][350] = 0;
  _$jscoverage['log4js.js'][351] = 0;
  _$jscoverage['log4js.js'][352] = 0;
  _$jscoverage['log4js.js'][357] = 0;
  _$jscoverage['log4js.js'][358] = 0;
  _$jscoverage['log4js.js'][359] = 0;
  _$jscoverage['log4js.js'][360] = 0;
  _$jscoverage['log4js.js'][361] = 0;
  _$jscoverage['log4js.js'][366] = 0;
  _$jscoverage['log4js.js'][367] = 0;
  _$jscoverage['log4js.js'][368] = 0;
  _$jscoverage['log4js.js'][369] = 0;
  _$jscoverage['log4js.js'][372] = 0;
  _$jscoverage['log4js.js'][394] = 0;
  _$jscoverage['log4js.js'][395] = 0;
  _$jscoverage['log4js.js'][399] = 0;
  _$jscoverage['log4js.js'][402] = 0;
  _$jscoverage['log4js.js'][403] = 0;
  _$jscoverage['log4js.js'][407] = 0;
  _$jscoverage['log4js.js'][408] = 0;
  _$jscoverage['log4js.js'][409] = 0;
}
_$jscoverage['log4js.js'][47]++;
var events = require("events"), fs = require("fs"), path = require("path"), util = require("util"), layouts = require("./layouts"), levels = require("./levels"), consoleAppender = require("./appenders/console").appender, DEFAULT_CATEGORY = "[default]", ALL_CATEGORIES = "[all]", appenders = {}, loggers = {}, appenderMakers = {};
_$jscoverage['log4js.js'][66]++;
function getLogger(categoryName) {
  _$jscoverage['log4js.js'][69]++;
  if (! (typeof categoryName == "string")) {
    _$jscoverage['log4js.js'][70]++;
    categoryName = DEFAULT_CATEGORY;
  }
  _$jscoverage['log4js.js'][73]++;
  var appenderList;
  _$jscoverage['log4js.js'][74]++;
  if (! loggers[categoryName]) {
    _$jscoverage['log4js.js'][76]++;
    loggers[categoryName] = new Logger(categoryName);
    _$jscoverage['log4js.js'][77]++;
    if (appenders[categoryName]) {
      _$jscoverage['log4js.js'][78]++;
      appenderList = appenders[categoryName];
      _$jscoverage['log4js.js'][79]++;
      appenderList.forEach((function (appender) {
  _$jscoverage['log4js.js'][80]++;
  loggers[categoryName].addListener("log", appender);
}));
    }
    _$jscoverage['log4js.js'][83]++;
    if (appenders[ALL_CATEGORIES]) {
      _$jscoverage['log4js.js'][84]++;
      appenderList = appenders[ALL_CATEGORIES];
      _$jscoverage['log4js.js'][85]++;
      appenderList.forEach((function (appender) {
  _$jscoverage['log4js.js'][86]++;
  loggers[categoryName].addListener("log", appender);
}));
    }
  }
  _$jscoverage['log4js.js'][91]++;
  return loggers[categoryName];
}
_$jscoverage['log4js.js'][97]++;
function addAppender() {
  _$jscoverage['log4js.js'][98]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['log4js.js'][99]++;
  var appender = args.shift();
  _$jscoverage['log4js.js'][100]++;
  if (args.length == 0 || args[0] === undefined) {
    _$jscoverage['log4js.js'][101]++;
    args = [ALL_CATEGORIES];
  }
  _$jscoverage['log4js.js'][104]++;
  if (Array.isArray(args[0])) {
    _$jscoverage['log4js.js'][105]++;
    args = args[0];
  }
  _$jscoverage['log4js.js'][108]++;
  args.forEach((function (category) {
  _$jscoverage['log4js.js'][109]++;
  if (! appenders[category]) {
    _$jscoverage['log4js.js'][110]++;
    appenders[category] = [];
  }
  _$jscoverage['log4js.js'][112]++;
  appenders[category].push(appender);
  _$jscoverage['log4js.js'][114]++;
  if (category === ALL_CATEGORIES) {
    _$jscoverage['log4js.js'][115]++;
    for (var logger in loggers) {
      _$jscoverage['log4js.js'][116]++;
      if (loggers.hasOwnProperty(logger)) {
        _$jscoverage['log4js.js'][117]++;
        loggers[logger].addListener("log", appender);
      }
}
  }
  else {
    _$jscoverage['log4js.js'][120]++;
    if (loggers[category]) {
      _$jscoverage['log4js.js'][121]++;
      loggers[category].addListener("log", appender);
    }
  }
}));
}
_$jscoverage['log4js.js'][126]++;
function clearAppenders() {
  _$jscoverage['log4js.js'][127]++;
  appenders = {};
  _$jscoverage['log4js.js'][128]++;
  for (var logger in loggers) {
    _$jscoverage['log4js.js'][129]++;
    if (loggers.hasOwnProperty(logger)) {
      _$jscoverage['log4js.js'][130]++;
      loggers[logger].removeAllListeners("log");
    }
}
}
_$jscoverage['log4js.js'][135]++;
function configureAppenders(appenderList) {
  _$jscoverage['log4js.js'][136]++;
  clearAppenders();
  _$jscoverage['log4js.js'][137]++;
  if (appenderList) {
    _$jscoverage['log4js.js'][138]++;
    appenderList.forEach((function (appenderConfig) {
  _$jscoverage['log4js.js'][139]++;
  loadAppender(appenderConfig.type);
  _$jscoverage['log4js.js'][140]++;
  var appender;
  _$jscoverage['log4js.js'][141]++;
  appenderConfig.makers = appenderMakers;
  _$jscoverage['log4js.js'][142]++;
  appender = appenderMakers[appenderConfig.type](appenderConfig);
  _$jscoverage['log4js.js'][143]++;
  if (appender) {
    _$jscoverage['log4js.js'][144]++;
    addAppender(appender, appenderConfig.category);
  }
  else {
    _$jscoverage['log4js.js'][146]++;
    throw new Error("log4js configuration problem for " + util.inspect(appenderConfig));
  }
}));
  }
  else {
    _$jscoverage['log4js.js'][150]++;
    addAppender(consoleAppender());
  }
}
_$jscoverage['log4js.js'][154]++;
function configureLevels(levels) {
  _$jscoverage['log4js.js'][155]++;
  if (levels) {
    _$jscoverage['log4js.js'][156]++;
    for (var category in levels) {
      _$jscoverage['log4js.js'][157]++;
      if (levels.hasOwnProperty(category)) {
        _$jscoverage['log4js.js'][158]++;
        getLogger(category).setLevel(levels[category]);
      }
}
  }
  else {
    _$jscoverage['log4js.js'][162]++;
    for (l in loggers) {
      _$jscoverage['log4js.js'][163]++;
      if (loggers.hasOwnProperty(l)) {
        _$jscoverage['log4js.js'][164]++;
        loggers[l].setLevel();
      }
}
  }
}
_$jscoverage['log4js.js'][179]++;
function LoggingEvent(categoryName, level, data, logger) {
  _$jscoverage['log4js.js'][180]++;
  this.startTime = new Date();
  _$jscoverage['log4js.js'][181]++;
  this.categoryName = categoryName;
  _$jscoverage['log4js.js'][182]++;
  this.data = data;
  _$jscoverage['log4js.js'][183]++;
  this.level = level;
  _$jscoverage['log4js.js'][184]++;
  this.logger = logger;
}
_$jscoverage['log4js.js'][194]++;
function Logger(name, level) {
  _$jscoverage['log4js.js'][195]++;
  this.category = name || DEFAULT_CATEGORY;
  _$jscoverage['log4js.js'][197]++;
  if (! this.level) {
    _$jscoverage['log4js.js'][198]++;
    this.__proto__.level = levels.TRACE;
  }
}
_$jscoverage['log4js.js'][201]++;
util.inherits(Logger, events.EventEmitter);
_$jscoverage['log4js.js'][203]++;
Logger.prototype.setLevel = (function (level) {
  _$jscoverage['log4js.js'][204]++;
  this.level = levels.toLevel(level, levels.TRACE);
});
_$jscoverage['log4js.js'][207]++;
Logger.prototype.removeLevel = (function () {
  _$jscoverage['log4js.js'][208]++;
  delete this.level;
});
_$jscoverage['log4js.js'][211]++;
Logger.prototype.log = (function () {
  _$jscoverage['log4js.js'][212]++;
  var args = Array.prototype.slice.call(arguments), logLevel = args.shift(), loggingEvent = new LoggingEvent(this.category, logLevel, args, this);
  _$jscoverage['log4js.js'][215]++;
  this.emit("log", loggingEvent);
});
_$jscoverage['log4js.js'][218]++;
Logger.prototype.isLevelEnabled = (function (otherLevel) {
  _$jscoverage['log4js.js'][219]++;
  return this.level.isLessThanOrEqualTo(otherLevel);
});
_$jscoverage['log4js.js'][222]++;
["Trace", "Debug", "Info", "Warn", "Error", "Fatal"].forEach((function (levelString) {
  _$jscoverage['log4js.js'][224]++;
  var level = levels.toLevel(levelString);
  _$jscoverage['log4js.js'][225]++;
  Logger.prototype["is" + levelString + "Enabled"] = (function () {
  _$jscoverage['log4js.js'][226]++;
  return this.isLevelEnabled(level);
});
  _$jscoverage['log4js.js'][229]++;
  Logger.prototype[levelString.toLowerCase()] = (function () {
  _$jscoverage['log4js.js'][230]++;
  if (this.isLevelEnabled(level)) {
    _$jscoverage['log4js.js'][231]++;
    var args = Array.prototype.slice.call(arguments);
    _$jscoverage['log4js.js'][232]++;
    args.unshift(level);
    _$jscoverage['log4js.js'][233]++;
    Logger.prototype.log.apply(this, args);
  }
});
}));
_$jscoverage['log4js.js'][239]++;
function setGlobalLogLevel(level) {
  _$jscoverage['log4js.js'][240]++;
  Logger.prototype.level = levels.toLevel(level, levels.TRACE);
}
_$jscoverage['log4js.js'][248]++;
function getDefaultLogger() {
  _$jscoverage['log4js.js'][249]++;
  return getLogger(DEFAULT_CATEGORY);
}
_$jscoverage['log4js.js'][252]++;
function findConfiguration(filename) {
  _$jscoverage['log4js.js'][253]++;
  var path;
  _$jscoverage['log4js.js'][254]++;
  try {
    _$jscoverage['log4js.js'][255]++;
    path = require.resolve(filename || "log4js.json");
  }
  catch (e) {
    _$jscoverage['log4js.js'][258]++;
    path = filename || __dirname + "/log4js.json";
  }
  _$jscoverage['log4js.js'][261]++;
  return path;
}
_$jscoverage['log4js.js'][264]++;
var configState = {};
_$jscoverage['log4js.js'][266]++;
function loadConfigurationFile(filename) {
  _$jscoverage['log4js.js'][267]++;
  filename = findConfiguration(filename);
  _$jscoverage['log4js.js'][268]++;
  if (filename && (! configState.lastFilename || filename !== configState.lastFilename || ! configState.lastMTime || fs.statSync(filename).mtime !== configState.lastMTime)) {
    _$jscoverage['log4js.js'][270]++;
    configState.lastFilename = filename;
    _$jscoverage['log4js.js'][271]++;
    configState.lastMTime = fs.statSync(filename).mtime;
    _$jscoverage['log4js.js'][272]++;
    return JSON.parse(fs.readFileSync(filename, "utf8"));
  }
  _$jscoverage['log4js.js'][274]++;
  return undefined;
}
_$jscoverage['log4js.js'][277]++;
function configureOnceOff(config) {
  _$jscoverage['log4js.js'][278]++;
  if (config) {
    _$jscoverage['log4js.js'][279]++;
    try {
      _$jscoverage['log4js.js'][280]++;
      configureAppenders(config.appenders);
      _$jscoverage['log4js.js'][281]++;
      configureLevels(config.levels);
      _$jscoverage['log4js.js'][283]++;
      if (config.doNotReplaceConsole) {
        _$jscoverage['log4js.js'][284]++;
        restoreConsole();
      }
      else {
        _$jscoverage['log4js.js'][286]++;
        replaceConsole();
      }
    }
    catch (e) {
      _$jscoverage['log4js.js'][289]++;
      throw new Error("Problem reading log4js config " + util.inspect(config) + ". Error was \"" + e.message + "\" (" + e.stack + ")");
    }
  }
}
_$jscoverage['log4js.js'][294]++;
function reloadConfiguration() {
  _$jscoverage['log4js.js'][295]++;
  var filename = findConfiguration(configState.filename), mtime;
  _$jscoverage['log4js.js'][297]++;
  if (! filename) {
    _$jscoverage['log4js.js'][299]++;
    return;
  }
  _$jscoverage['log4js.js'][301]++;
  try {
    _$jscoverage['log4js.js'][302]++;
    mtime = fs.statSync(filename).mtime;
  }
  catch (e) {
    _$jscoverage['log4js.js'][304]++;
    getLogger("log4js").warn("Failed to load configuration file " + filename);
    _$jscoverage['log4js.js'][305]++;
    return;
  }
  _$jscoverage['log4js.js'][307]++;
  if (configState.lastFilename && configState.lastFilename === filename) {
    _$jscoverage['log4js.js'][308]++;
    if (mtime.getTime() > configState.lastMTime.getTime()) {
      _$jscoverage['log4js.js'][309]++;
      configureOnceOff(loadConfigurationFile(filename));
    }
  }
  else {
    _$jscoverage['log4js.js'][312]++;
    configureOnceOff(loadConfigurationFile(filename));
  }
}
_$jscoverage['log4js.js'][316]++;
function initReloadConfiguration(filename, options) {
  _$jscoverage['log4js.js'][317]++;
  if (configState.timerId) {
    _$jscoverage['log4js.js'][318]++;
    clearInterval(configState.timerId);
    _$jscoverage['log4js.js'][319]++;
    delete configState.timerId;
  }
  _$jscoverage['log4js.js'][321]++;
  configState.filename = filename;
  _$jscoverage['log4js.js'][322]++;
  configState.timerId = setInterval(reloadConfiguration, options.reloadSecs * 1000);
}
_$jscoverage['log4js.js'][325]++;
function configure(configurationFileOrObject, options) {
  _$jscoverage['log4js.js'][326]++;
  var config = configurationFileOrObject;
  _$jscoverage['log4js.js'][327]++;
  if (config === undefined || config === null || typeof config === "string") {
    _$jscoverage['log4js.js'][328]++;
    options = options || {};
    _$jscoverage['log4js.js'][329]++;
    if (options.reloadSecs) {
      _$jscoverage['log4js.js'][330]++;
      initReloadConfiguration(config, options);
    }
    _$jscoverage['log4js.js'][332]++;
    configureOnceOff(loadConfigurationFile(config));
  }
  else {
    _$jscoverage['log4js.js'][334]++;
    options = options || {};
    _$jscoverage['log4js.js'][335]++;
    if (options.reloadSecs) {
      _$jscoverage['log4js.js'][336]++;
      getLogger("log4js").warn("Ignoring configuration reload parameter for \"object\" configuration.");
    }
    _$jscoverage['log4js.js'][338]++;
    configureOnceOff(config);
  }
}
_$jscoverage['log4js.js'][342]++;
function replaceConsole(logger) {
  _$jscoverage['log4js.js'][343]++;
  function replaceWith(fn) {
    _$jscoverage['log4js.js'][344]++;
    return (function () {
  _$jscoverage['log4js.js'][345]++;
  fn.apply(logger, arguments);
});
}
  _$jscoverage['log4js.js'][348]++;
  if (console._preLog4js_log === undefined) {
    _$jscoverage['log4js.js'][349]++;
    logger = logger || getLogger("console");
    _$jscoverage['log4js.js'][350]++;
    ["log", "debug", "info", "warn", "error"].forEach((function (item) {
  _$jscoverage['log4js.js'][351]++;
  console["_preLog4js_" + item] = console[item];
  _$jscoverage['log4js.js'][352]++;
  console[item] = replaceWith(item === "log"? logger.info: logger[item]);
}));
  }
}
_$jscoverage['log4js.js'][357]++;
function restoreConsole() {
  _$jscoverage['log4js.js'][358]++;
  if (console._preLog4js_log) {
    _$jscoverage['log4js.js'][359]++;
    ["log", "debug", "info", "warn", "error"].forEach((function (item) {
  _$jscoverage['log4js.js'][360]++;
  console[item] = console["_preLog4js_" + item];
  _$jscoverage['log4js.js'][361]++;
  delete console["_preLog4js_" + item];
}));
  }
}
_$jscoverage['log4js.js'][366]++;
function loadAppender(appender) {
  _$jscoverage['log4js.js'][367]++;
  var appenderModule = require("./appenders/" + appender);
  _$jscoverage['log4js.js'][368]++;
  module.exports.appenders[appenderModule.name] = appenderModule.appender;
  _$jscoverage['log4js.js'][369]++;
  appenderMakers[appenderModule.name] = appenderModule.configure;
}
_$jscoverage['log4js.js'][372]++;
module.exports = {getLogger: getLogger, getDefaultLogger: getDefaultLogger, addAppender: addAppender, loadAppender: loadAppender, clearAppenders: clearAppenders, configure: configure, replaceConsole: replaceConsole, restoreConsole: restoreConsole, levels: levels, setGlobalLogLevel: setGlobalLogLevel, layouts: layouts, appenders: {}, appenderMakers: appenderMakers, connectLogger: require("./connect-logger").connectLogger};
_$jscoverage['log4js.js'][394]++;
["console", "file", "logLevelFilter"].forEach((function (appender) {
  _$jscoverage['log4js.js'][395]++;
  loadAppender(appender);
}));
_$jscoverage['log4js.js'][399]++;
configure(findConfiguration());
_$jscoverage['log4js.js'][402]++;
["basicLayout", "messagePassThroughLayout", "colouredLayout", "coloredLayout"].forEach((function (item) {
  _$jscoverage['log4js.js'][403]++;
  module.exports[item] = layouts[item];
}));
_$jscoverage['log4js.js'][407]++;
module.exports.consoleAppender = module.exports.appenders.console;
_$jscoverage['log4js.js'][408]++;
module.exports.fileAppender = module.exports.appenders.file;
_$jscoverage['log4js.js'][409]++;
module.exports.logLevelFilter = module.exports.appenders.logLevelFilter;
_$jscoverage['log4js.js'].source = ["/*"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","/*jsl:option explicit*/","","/**"," * @fileoverview log4js is a library to log in JavaScript in similar manner"," * than in log4j for Java. The API should be nearly the same."," *"," * &lt;h3&gt;Example:&lt;/h3&gt;"," * &lt;pre&gt;"," *  var logging = require('log4js');"," *  //add an appender that logs all messages to stdout."," *  logging.addAppender(logging.consoleAppender());"," *  //add an appender that logs \"some-category\" to a file"," *  logging.addAppender(logging.fileAppender(\"file.log\"), \"some-category\");"," *  //get a logger"," *  var log = logging.getLogger(\"some-category\");"," *  log.setLevel(logging.levels.TRACE); //set the Level"," *"," *  ..."," *"," *  //call the log"," *  log.trace(\"trace me\" );"," * &lt;/pre&gt;"," *"," * NOTE: the authors below are the original browser-based log4js authors"," * don't try to contact them about bugs in this version :)"," * @version 1.0"," * @author Stephan Strittmatter - http://jroller.com/page/stritti"," * @author Seth Chisamore - http://www.chisamore.com"," * @since 2005-05-20"," * @static"," * Website: http://log4js.berlios.de"," */","var events = require('events')",", fs = require('fs')",", path = require('path')",", util = require('util')",", layouts = require('./layouts')",", levels = require('./levels')",", consoleAppender = require('./appenders/console').appender",", DEFAULT_CATEGORY = '[default]'",", ALL_CATEGORIES = '[all]'",", appenders = {}",", loggers = {}",", appenderMakers = {};","","/**"," * Get a logger instance. Instance is cached on categoryName level."," * @param  {String} categoryName name of category to log to."," * @return {Logger} instance of logger for the category"," * @static"," */","function getLogger (categoryName) {","","    // Use default logger if categoryName is not specified or invalid","    if (!(typeof categoryName == \"string\")) {","        categoryName = DEFAULT_CATEGORY;","    }","","    var appenderList;","    if (!loggers[categoryName]) {","        // Create the logger for this name if it doesn't already exist","        loggers[categoryName] = new Logger(categoryName);","        if (appenders[categoryName]) {","            appenderList = appenders[categoryName];","            appenderList.forEach(function(appender) {","                loggers[categoryName].addListener(\"log\", appender);","            });","        }","        if (appenders[ALL_CATEGORIES]) {","            appenderList = appenders[ALL_CATEGORIES];","            appenderList.forEach(function(appender) {","                loggers[categoryName].addListener(\"log\", appender);","            });","        }","    }","","    return loggers[categoryName];","}","","/**"," * args are appender, then zero or more categories"," */","function addAppender () {","    var args = Array.prototype.slice.call(arguments);","    var appender = args.shift();","    if (args.length == 0 || args[0] === undefined) {","        args = [ ALL_CATEGORIES ];","    }","    //argument may already be an array","    if (Array.isArray(args[0])) {","        args = args[0];","    }","","    args.forEach(function(category) {","        if (!appenders[category]) {","            appenders[category] = [];","        }","        appenders[category].push(appender);","","        if (category === ALL_CATEGORIES) {","            for (var logger in loggers) {","                if (loggers.hasOwnProperty(logger)) {","                    loggers[logger].addListener(\"log\", appender);","                }","            }","        } else if (loggers[category]) {","            loggers[category].addListener(\"log\", appender);","        }","    });","}","","function clearAppenders () {","    appenders = {};","    for (var logger in loggers) {","        if (loggers.hasOwnProperty(logger)) {","            loggers[logger].removeAllListeners(\"log\");","        }","    }","}","","function configureAppenders(appenderList) {","    clearAppenders();","    if (appenderList) {","        appenderList.forEach(function(appenderConfig) {","            loadAppender(appenderConfig.type);","            var appender;","            appenderConfig.makers = appenderMakers;","            appender = appenderMakers[appenderConfig.type](appenderConfig);","            if (appender) {","                addAppender(appender, appenderConfig.category);","            } else {","                throw new Error(\"log4js configuration problem for \"+util.inspect(appenderConfig));","            }","        });","    } else {","        addAppender(consoleAppender());","    }","}","","function configureLevels(levels) {","    if (levels) {","        for (var category in levels) {","            if (levels.hasOwnProperty(category)) {","                getLogger(category).setLevel(levels[category]);","            }","        }","    } else {","        for (l in loggers) {","            if (loggers.hasOwnProperty(l)) {","                loggers[l].setLevel();","            }","        }","    }","}","","/**"," * Models a logging event."," * @constructor"," * @param {String} categoryName name of category"," * @param {Log4js.Level} level level of message"," * @param {Array} data objects to log"," * @param {Log4js.Logger} logger the associated logger"," * @author Seth Chisamore"," */","function LoggingEvent (categoryName, level, data, logger) {","    this.startTime = new Date();","    this.categoryName = categoryName;","    this.data = data;","    this.level = level;","    this.logger = logger;","}","","/**"," * Logger to log messages."," * use {@see Log4js#getLogger(String)} to get an instance."," * @constructor"," * @param name name of category to log to"," * @author Stephan Strittmatter"," */","function Logger (name, level) {","    this.category = name || DEFAULT_CATEGORY;","","    if (! this.level) {","        this.__proto__.level = levels.TRACE;","    }","}","util.inherits(Logger, events.EventEmitter);","","Logger.prototype.setLevel = function(level) {","    this.level = levels.toLevel(level, levels.TRACE);","};","","Logger.prototype.removeLevel = function() {","    delete this.level;","};","","Logger.prototype.log = function() {","    var args = Array.prototype.slice.call(arguments)","  , logLevel = args.shift()","  , loggingEvent = new LoggingEvent(this.category, logLevel, args, this);","    this.emit(\"log\", loggingEvent);","};","","Logger.prototype.isLevelEnabled = function(otherLevel) {","    return this.level.isLessThanOrEqualTo(otherLevel);","};","","['Trace','Debug','Info','Warn','Error','Fatal'].forEach(","    function(levelString) {","        var level = levels.toLevel(levelString);","        Logger.prototype['is'+levelString+'Enabled'] = function() {","            return this.isLevelEnabled(level);","        };","","        Logger.prototype[levelString.toLowerCase()] = function () {","            if (this.isLevelEnabled(level)) {","                var args = Array.prototype.slice.call(arguments);","                args.unshift(level);","                Logger.prototype.log.apply(this, args);","            }","        };","    }",");","","function setGlobalLogLevel(level) {","    Logger.prototype.level = levels.toLevel(level, levels.TRACE);","}","","/**"," * Get the default logger instance."," * @return {Logger} instance of default logger"," * @static"," */","function getDefaultLogger () {","    return getLogger(DEFAULT_CATEGORY);","}","","function findConfiguration(filename) {","    var path;","    try {","        path = require.resolve(filename || 'log4js.json');","    } catch (e) {","        //file not found. default to the one in the log4js module.","        path = filename || __dirname + '/log4js.json';","    }","","    return path;","}","","var configState = {};","","function loadConfigurationFile(filename) {","    filename = findConfiguration(filename);","    if (filename &amp;&amp; (!configState.lastFilename || filename !== configState.lastFilename ||","                     !configState.lastMTime || fs.statSync(filename).mtime !== configState.lastMTime)) {","        configState.lastFilename = filename;","        configState.lastMTime = fs.statSync(filename).mtime;","        return JSON.parse(fs.readFileSync(filename, \"utf8\"));","    }","    return undefined;","}","","function configureOnceOff(config) {","    if (config) {","        try {","            configureAppenders(config.appenders);","            configureLevels(config.levels);","","            if (config.doNotReplaceConsole) {","                restoreConsole();","            } else {","                replaceConsole();","            }","        } catch (e) {","            throw new Error(\"Problem reading log4js config \" + util.inspect(config) + \". Error was \\\"\" + e.message + \"\\\" (\"+e.stack+\")\");","        }","    }","}","","function reloadConfiguration() {","    var filename = findConfiguration(configState.filename),","    mtime;","    if (!filename) {","        // can't find anything to reload","        return;","    }","    try {","        mtime = fs.statSync(filename).mtime;","    } catch (e) {","        getLogger('log4js').warn('Failed to load configuration file ' + filename);","        return;","    }","    if (configState.lastFilename &amp;&amp; configState.lastFilename === filename) {","        if (mtime.getTime() &gt; configState.lastMTime.getTime()) {","            configureOnceOff(loadConfigurationFile(filename));","        }","    } else {","        configureOnceOff(loadConfigurationFile(filename));","    }","}","","function initReloadConfiguration(filename, options) {","    if (configState.timerId) {","        clearInterval(configState.timerId);","        delete configState.timerId;","    }","    configState.filename = filename;","    configState.timerId = setInterval(reloadConfiguration, options.reloadSecs*1000);","}","","function configure (configurationFileOrObject, options) {","    var config = configurationFileOrObject;","    if (config === undefined || config === null || typeof(config) === 'string') {","        options = options || { };","        if (options.reloadSecs) {","            initReloadConfiguration(config, options);","        }","        configureOnceOff(loadConfigurationFile(config));","    } else {","        options = options || {};","        if (options.reloadSecs) {","            getLogger('log4js').warn('Ignoring configuration reload parameter for \"object\" configuration.');","        }","        configureOnceOff(config);","    }","}","","function replaceConsole(logger) {","    function replaceWith(fn) {","        return function() {","            fn.apply(logger, arguments);","        }","    }","    if (console['_preLog4js_log'] === undefined) {","        logger = logger || getLogger(\"console\");","        ['log','debug','info','warn','error'].forEach(function (item) {","            console['_preLog4js_'+item] = console[item];","            console[item] = replaceWith(item === 'log' ? logger.info : logger[item]);","        });","    }","}","","function restoreConsole() {","    if (console['_preLog4js_log']) {","        ['log', 'debug', 'info', 'warn', 'error'].forEach(function (item) {","            console[item] = console['_preLog4js_'+item];","            delete console['_preLog4js_'+item];","        });","    }","}","","function loadAppender(appender) {","    var appenderModule = require('./appenders/' + appender);","    module.exports.appenders[appenderModule.name] = appenderModule.appender;","    appenderMakers[appenderModule.name] = appenderModule.configure;","}","","module.exports = {","    getLogger: getLogger,","    getDefaultLogger: getDefaultLogger,","","    addAppender: addAppender,","    loadAppender: loadAppender,","    clearAppenders: clearAppenders,","    configure: configure,","","    replaceConsole: replaceConsole,","    restoreConsole: restoreConsole,","","    levels: levels,","    setGlobalLogLevel: setGlobalLogLevel,","","    layouts: layouts,","    appenders: {},","    appenderMakers: appenderMakers,","    connectLogger: require('./connect-logger').connectLogger","};","","//load the old-style appenders","[ 'console', 'file', 'logLevelFilter' ].forEach(function(appender) {","   loadAppender(appender);","});","","//set ourselves up if we can find a default log4js.json","configure(findConfiguration());","","//keep the old-style layouts","['basicLayout','messagePassThroughLayout','colouredLayout','coloredLayout'].forEach(function(item) {","    module.exports[item] = layouts[item];","});","","//and the old-style appenders","module.exports.consoleAppender = module.exports.appenders.console;","module.exports.fileAppender = module.exports.appenders.file;","module.exports.logLevelFilter = module.exports.appenders.logLevelFilter;"];
