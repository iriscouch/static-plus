/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['levels.js']) {
  _$jscoverage['levels.js'] = [];
  _$jscoverage['levels.js'][1] = 0;
  _$jscoverage['levels.js'][2] = 0;
  _$jscoverage['levels.js'][3] = 0;
  _$jscoverage['levels.js'][13] = 0;
  _$jscoverage['levels.js'][15] = 0;
  _$jscoverage['levels.js'][16] = 0;
  _$jscoverage['levels.js'][19] = 0;
  _$jscoverage['levels.js'][20] = 0;
  _$jscoverage['levels.js'][21] = 0;
  _$jscoverage['levels.js'][22] = 0;
  _$jscoverage['levels.js'][25] = 0;
  _$jscoverage['levels.js'][26] = 0;
  _$jscoverage['levels.js'][28] = 0;
  _$jscoverage['levels.js'][29] = 0;
  _$jscoverage['levels.js'][32] = 0;
  _$jscoverage['levels.js'][33] = 0;
  _$jscoverage['levels.js'][34] = 0;
  _$jscoverage['levels.js'][36] = 0;
  _$jscoverage['levels.js'][39] = 0;
  _$jscoverage['levels.js'][40] = 0;
  _$jscoverage['levels.js'][41] = 0;
  _$jscoverage['levels.js'][43] = 0;
  _$jscoverage['levels.js'][46] = 0;
}
_$jscoverage['levels.js'][1]++;
function Level(level, levelStr) {
  _$jscoverage['levels.js'][2]++;
  this.level = level;
  _$jscoverage['levels.js'][3]++;
  this.levelStr = levelStr;
}
_$jscoverage['levels.js'][13]++;
function toLevel(sArg, defaultLevel) {
  _$jscoverage['levels.js'][15]++;
  if (sArg === null) {
    _$jscoverage['levels.js'][16]++;
    return defaultLevel;
  }
  _$jscoverage['levels.js'][19]++;
  if (typeof sArg == "string") {
    _$jscoverage['levels.js'][20]++;
    var s = sArg.toUpperCase();
    _$jscoverage['levels.js'][21]++;
    if (module.exports[s]) {
      _$jscoverage['levels.js'][22]++;
      return module.exports[s];
    }
  }
  _$jscoverage['levels.js'][25]++;
  return defaultLevel;
}
_$jscoverage['levels.js'][26]++;
;
_$jscoverage['levels.js'][28]++;
Level.prototype.toString = (function () {
  _$jscoverage['levels.js'][29]++;
  return this.levelStr;
});
_$jscoverage['levels.js'][32]++;
Level.prototype.isLessThanOrEqualTo = (function (otherLevel) {
  _$jscoverage['levels.js'][33]++;
  if (typeof otherLevel === "string") {
    _$jscoverage['levels.js'][34]++;
    otherLevel = Level.toLevel(otherLevel);
  }
  _$jscoverage['levels.js'][36]++;
  return this.level <= otherLevel.level;
});
_$jscoverage['levels.js'][39]++;
Level.prototype.isGreaterThanOrEqualTo = (function (otherLevel) {
  _$jscoverage['levels.js'][40]++;
  if (typeof otherLevel === "string") {
    _$jscoverage['levels.js'][41]++;
    otherLevel = Level.toLevel(otherLevel);
  }
  _$jscoverage['levels.js'][43]++;
  return this.level >= otherLevel.level;
});
_$jscoverage['levels.js'][46]++;
module.exports = {ALL: new Level(Number.MIN_VALUE, "ALL"), TRACE: new Level(5000, "TRACE"), DEBUG: new Level(10000, "DEBUG"), INFO: new Level(20000, "INFO"), WARN: new Level(30000, "WARN"), ERROR: new Level(40000, "ERROR"), FATAL: new Level(50000, "FATAL"), OFF: new Level(Number.MAX_VALUE, "OFF"), toLevel: toLevel};
_$jscoverage['levels.js'].source = ["function Level(level, levelStr) {","    this.level = level;","    this.levelStr = levelStr;","}","","/**"," * converts given String to corresponding Level"," * @param {String} sArg String value of Level"," * @param {Log4js.Level} defaultLevel default Level, if no String representation"," * @return Level object"," * @type Log4js.Level"," */","function toLevel(sArg, defaultLevel) {","","    if (sArg === null) {","\treturn defaultLevel;","    }","","    if (typeof sArg == \"string\") {","\tvar s = sArg.toUpperCase();","\tif (module.exports[s]) {","\t    return module.exports[s];","\t}","    }","    return defaultLevel;","};","","Level.prototype.toString = function() {","    return this.levelStr;","};","","Level.prototype.isLessThanOrEqualTo = function(otherLevel) {","    if (typeof otherLevel === \"string\") {","        otherLevel = Level.toLevel(otherLevel);","    }","    return this.level &lt;= otherLevel.level;","};","","Level.prototype.isGreaterThanOrEqualTo = function(otherLevel) {","    if (typeof otherLevel === \"string\") {","        otherLevel = Level.toLevel(otherLevel);","    }","    return this.level &gt;= otherLevel.level;","};","","module.exports = {","    ALL: new Level(Number.MIN_VALUE, \"ALL\")","  , TRACE: new Level(5000, \"TRACE\")","  , DEBUG: new Level(10000, \"DEBUG\")","  , INFO: new Level(20000, \"INFO\")","  , WARN: new Level(30000, \"WARN\")","  , ERROR: new Level(40000, \"ERROR\")","  , FATAL: new Level(50000, \"FATAL\")","  , OFF: new Level(Number.MAX_VALUE, \"OFF\")","  , toLevel: toLevel","};"];
