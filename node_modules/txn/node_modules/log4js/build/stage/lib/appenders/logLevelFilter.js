/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['appenders/logLevelFilter.js']) {
  _$jscoverage['appenders/logLevelFilter.js'] = [];
  _$jscoverage['appenders/logLevelFilter.js'][1] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][2] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][4] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][5] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][6] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][7] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][8] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][13] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][14] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][15] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][16] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][19] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][20] = 0;
  _$jscoverage['appenders/logLevelFilter.js'][21] = 0;
}
_$jscoverage['appenders/logLevelFilter.js'][1]++;
var levels = require("../levels");
_$jscoverage['appenders/logLevelFilter.js'][2]++;
var log4js = require("../log4js");
_$jscoverage['appenders/logLevelFilter.js'][4]++;
function logLevelFilter(levelString, appender) {
  _$jscoverage['appenders/logLevelFilter.js'][5]++;
  var level = levels.toLevel(levelString);
  _$jscoverage['appenders/logLevelFilter.js'][6]++;
  return (function (logEvent) {
  _$jscoverage['appenders/logLevelFilter.js'][7]++;
  if (logEvent.level.isGreaterThanOrEqualTo(level)) {
    _$jscoverage['appenders/logLevelFilter.js'][8]++;
    appender(logEvent);
  }
});
}
_$jscoverage['appenders/logLevelFilter.js'][13]++;
function configure(config) {
  _$jscoverage['appenders/logLevelFilter.js'][14]++;
  log4js.loadAppender(config.appender.type);
  _$jscoverage['appenders/logLevelFilter.js'][15]++;
  var appender = log4js.appenderMakers[config.appender.type](config.appender);
  _$jscoverage['appenders/logLevelFilter.js'][16]++;
  return logLevelFilter(config.level, appender);
}
_$jscoverage['appenders/logLevelFilter.js'][19]++;
exports.name = "logLevelFilter";
_$jscoverage['appenders/logLevelFilter.js'][20]++;
exports.appender = logLevelFilter;
_$jscoverage['appenders/logLevelFilter.js'][21]++;
exports.configure = configure;
_$jscoverage['appenders/logLevelFilter.js'].source = ["var levels = require('../levels');","var log4js = require('../log4js');","","function logLevelFilter (levelString, appender) {","    var level = levels.toLevel(levelString);","    return function(logEvent) {","\tif (logEvent.level.isGreaterThanOrEqualTo(level)) {","\t    appender(logEvent);","\t}","    }","}","","function configure(config) {","    log4js.loadAppender(config.appender.type);","    var appender = log4js.appenderMakers[config.appender.type](config.appender);","    return logLevelFilter(config.level, appender);","}","","exports.name = \"logLevelFilter\";","exports.appender = logLevelFilter;","exports.configure = configure;"];
