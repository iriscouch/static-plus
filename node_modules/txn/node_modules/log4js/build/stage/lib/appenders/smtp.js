/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['appenders/smtp.js']) {
  _$jscoverage['appenders/smtp.js'] = [];
  _$jscoverage['appenders/smtp.js'][1] = 0;
  _$jscoverage['appenders/smtp.js'][16] = 0;
  _$jscoverage['appenders/smtp.js'][17] = 0;
  _$jscoverage['appenders/smtp.js'][18] = 0;
  _$jscoverage['appenders/smtp.js'][19] = 0;
  _$jscoverage['appenders/smtp.js'][20] = 0;
  _$jscoverage['appenders/smtp.js'][21] = 0;
  _$jscoverage['appenders/smtp.js'][23] = 0;
  _$jscoverage['appenders/smtp.js'][24] = 0;
  _$jscoverage['appenders/smtp.js'][26] = 0;
  _$jscoverage['appenders/smtp.js'][27] = 0;
  _$jscoverage['appenders/smtp.js'][28] = 0;
  _$jscoverage['appenders/smtp.js'][30] = 0;
  _$jscoverage['appenders/smtp.js'][31] = 0;
  _$jscoverage['appenders/smtp.js'][32] = 0;
  _$jscoverage['appenders/smtp.js'][33] = 0;
  _$jscoverage['appenders/smtp.js'][36] = 0;
  _$jscoverage['appenders/smtp.js'][42] = 0;
  _$jscoverage['appenders/smtp.js'][43] = 0;
  _$jscoverage['appenders/smtp.js'][44] = 0;
  _$jscoverage['appenders/smtp.js'][49] = 0;
  _$jscoverage['appenders/smtp.js'][50] = 0;
  _$jscoverage['appenders/smtp.js'][51] = 0;
  _$jscoverage['appenders/smtp.js'][52] = 0;
  _$jscoverage['appenders/smtp.js'][53] = 0;
  _$jscoverage['appenders/smtp.js'][57] = 0;
  _$jscoverage['appenders/smtp.js'][58] = 0;
  _$jscoverage['appenders/smtp.js'][59] = 0;
  _$jscoverage['appenders/smtp.js'][60] = 0;
  _$jscoverage['appenders/smtp.js'][62] = 0;
  _$jscoverage['appenders/smtp.js'][66] = 0;
  _$jscoverage['appenders/smtp.js'][67] = 0;
  _$jscoverage['appenders/smtp.js'][68] = 0;
  _$jscoverage['appenders/smtp.js'][69] = 0;
  _$jscoverage['appenders/smtp.js'][71] = 0;
  _$jscoverage['appenders/smtp.js'][74] = 0;
  _$jscoverage['appenders/smtp.js'][75] = 0;
  _$jscoverage['appenders/smtp.js'][76] = 0;
}
_$jscoverage['appenders/smtp.js'][1]++;
var layouts = require("../layouts"), mailer = require("nodemailer");
_$jscoverage['appenders/smtp.js'][16]++;
function smtpAppender(recipients, sender, subject, layout, smtpConfig, sendInterval) {
  _$jscoverage['appenders/smtp.js'][17]++;
  sender = sender || smtpConfig.user;
  _$jscoverage['appenders/smtp.js'][18]++;
  layout = layout || layouts.basicLayout;
  _$jscoverage['appenders/smtp.js'][19]++;
  subjectLayout = layouts.messagePassThroughLayout;
  _$jscoverage['appenders/smtp.js'][20]++;
  mailer.SMTP = smtpConfig;
  _$jscoverage['appenders/smtp.js'][21]++;
  sendInterval = sendInterval * 1000 || 0;
  _$jscoverage['appenders/smtp.js'][23]++;
  var logEventBuffer = [];
  _$jscoverage['appenders/smtp.js'][24]++;
  var sendTimer;
  _$jscoverage['appenders/smtp.js'][26]++;
  function sendBuffer() {
    _$jscoverage['appenders/smtp.js'][27]++;
    if (logEventBuffer.length == 0) {
      _$jscoverage['appenders/smtp.js'][28]++;
      return;
    }
    _$jscoverage['appenders/smtp.js'][30]++;
    var firstEvent = logEventBuffer[0];
    _$jscoverage['appenders/smtp.js'][31]++;
    var body = "";
    _$jscoverage['appenders/smtp.js'][32]++;
    while (logEventBuffer.length > 0) {
      _$jscoverage['appenders/smtp.js'][33]++;
      body += layout(logEventBuffer.shift()) + "\n";
}
    _$jscoverage['appenders/smtp.js'][36]++;
    var msg = {sender: sender, to: recipients, subject: subject || subjectLayout(firstEvent), body: body};
    _$jscoverage['appenders/smtp.js'][42]++;
    mailer.send_mail(msg, (function (error, success) {
  _$jscoverage['appenders/smtp.js'][43]++;
  if (error) {
    _$jscoverage['appenders/smtp.js'][44]++;
    console.error("log4js.smtpAppender - Error happened ", error);
  }
}));
}
  _$jscoverage['appenders/smtp.js'][49]++;
  function scheduleSend() {
    _$jscoverage['appenders/smtp.js'][50]++;
    if (! sendTimer) {
      _$jscoverage['appenders/smtp.js'][51]++;
      sendTimer = setTimeout((function () {
  _$jscoverage['appenders/smtp.js'][52]++;
  sendTimer = null;
  _$jscoverage['appenders/smtp.js'][53]++;
  sendBuffer();
}), sendInterval);
    }
}
  _$jscoverage['appenders/smtp.js'][57]++;
  return (function (loggingEvent) {
  _$jscoverage['appenders/smtp.js'][58]++;
  logEventBuffer.push(loggingEvent);
  _$jscoverage['appenders/smtp.js'][59]++;
  if (sendInterval > 0) {
    _$jscoverage['appenders/smtp.js'][60]++;
    scheduleSend();
  }
  else {
    _$jscoverage['appenders/smtp.js'][62]++;
    sendBuffer();
  }
});
}
_$jscoverage['appenders/smtp.js'][66]++;
function configure(config) {
  _$jscoverage['appenders/smtp.js'][67]++;
  var layout;
  _$jscoverage['appenders/smtp.js'][68]++;
  if (config.layout) {
    _$jscoverage['appenders/smtp.js'][69]++;
    layout = layouts.layout(config.layout.type, config.layout);
  }
  _$jscoverage['appenders/smtp.js'][71]++;
  return smtpAppender(config.recipients, config.sender, config.subject, layout, config.smtp, config.sendInterval);
}
_$jscoverage['appenders/smtp.js'][74]++;
exports.name = "smtp";
_$jscoverage['appenders/smtp.js'][75]++;
exports.appender = smtpAppender;
_$jscoverage['appenders/smtp.js'][76]++;
exports.configure = configure;
_$jscoverage['appenders/smtp.js'].source = ["var layouts = require(\"../layouts\"),","\tmailer = require(\"nodemailer\");","","/**","* SMTP Appender. Sends logging events using SMTP protocol. ","* It can either send an email on each event or group several logging events gathered during specified interval.","*","* @param recipients comma separated list of email recipients","* @param sender sender of all emails (defaults to SMTP user)","* @param subject subject of all email messages (defaults to first event's message) ","* @param layout a function that takes a logevent and returns a string (defaults to basicLayout).","* @param smtpConfig SMTP configuration for 'nodemailer'","* @param sendInterval the time in seconds between sending attempts (defaults to 0); ","* all events are buffered and sent in one email during this time; if 0 than every event sends an email","*/","function smtpAppender(recipients, sender, subject, layout, smtpConfig, sendInterval) {","\tsender = sender || smtpConfig.user;","\tlayout = layout || layouts.basicLayout;","\tsubjectLayout = layouts.messagePassThroughLayout;","\tmailer.SMTP = smtpConfig;","\tsendInterval = sendInterval*1000 || 0;","\t","\tvar logEventBuffer = [];","\tvar sendTimer;","\t","\tfunction sendBuffer() {","\t\tif (logEventBuffer.length == 0)","\t\t\treturn;","\t\t","\t\tvar firstEvent = logEventBuffer[0];","\t\tvar body = \"\";","\t\twhile (logEventBuffer.length &gt; 0) {","\t\t\tbody += layout(logEventBuffer.shift()) + \"\\n\";","\t\t}","\t\t","\t\tvar msg = {","\t\t\t\tsender: sender,","\t\t\t\tto: recipients,","\t\t\t\tsubject: subject || subjectLayout(firstEvent),","\t\t\t\tbody: body","\t\t\t};","\t\tmailer.send_mail(msg, function(error, success) {","\t\t\tif (error) {","\t\t\t\tconsole.error(\"log4js.smtpAppender - Error happened \", error);","\t\t\t}","\t\t});","\t}","\t","\tfunction scheduleSend() {","\t\tif (!sendTimer)","\t\t\tsendTimer = setTimeout(function() {","\t\t\t\tsendTimer = null; ","\t\t\t\tsendBuffer();","\t\t\t}, sendInterval);","\t}","\t","\treturn function(loggingEvent) {","\t\tlogEventBuffer.push(loggingEvent);","\t\tif (sendInterval &gt; 0)","\t\t\tscheduleSend();","\t\telse","\t\t\tsendBuffer();","\t};","}","","function configure(config) {","\tvar layout;","\tif (config.layout) {","\t\tlayout = layouts.layout(config.layout.type, config.layout);","\t}","\treturn smtpAppender(config.recipients, config.sender, config.subject, layout, config.smtp, config.sendInterval);","}","","exports.name = \"smtp\";","exports.appender = smtpAppender;","exports.configure = configure;"];
