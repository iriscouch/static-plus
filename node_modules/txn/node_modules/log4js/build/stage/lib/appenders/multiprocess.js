/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['appenders/multiprocess.js']) {
  _$jscoverage['appenders/multiprocess.js'] = [];
  _$jscoverage['appenders/multiprocess.js'][1] = 0;
  _$jscoverage['appenders/multiprocess.js'][2] = 0;
  _$jscoverage['appenders/multiprocess.js'][3] = 0;
  _$jscoverage['appenders/multiprocess.js'][4] = 0;
  _$jscoverage['appenders/multiprocess.js'][6] = 0;
  _$jscoverage['appenders/multiprocess.js'][7] = 0;
  _$jscoverage['appenders/multiprocess.js'][8] = 0;
  _$jscoverage['appenders/multiprocess.js'][9] = 0;
  _$jscoverage['appenders/multiprocess.js'][10] = 0;
  _$jscoverage['appenders/multiprocess.js'][11] = 0;
  _$jscoverage['appenders/multiprocess.js'][12] = 0;
  _$jscoverage['appenders/multiprocess.js'][13] = 0;
  _$jscoverage['appenders/multiprocess.js'][14] = 0;
  _$jscoverage['appenders/multiprocess.js'][15] = 0;
  _$jscoverage['appenders/multiprocess.js'][17] = 0;
  _$jscoverage['appenders/multiprocess.js'][18] = 0;
  _$jscoverage['appenders/multiprocess.js'][19] = 0;
  _$jscoverage['appenders/multiprocess.js'][20] = 0;
  _$jscoverage['appenders/multiprocess.js'][23] = 0;
  _$jscoverage['appenders/multiprocess.js'][28] = 0;
  _$jscoverage['appenders/multiprocess.js'][29] = 0;
  _$jscoverage['appenders/multiprocess.js'][30] = 0;
  _$jscoverage['appenders/multiprocess.js'][31] = 0;
  _$jscoverage['appenders/multiprocess.js'][32] = 0;
  _$jscoverage['appenders/multiprocess.js'][35] = 0;
  _$jscoverage['appenders/multiprocess.js'][40] = 0;
  _$jscoverage['appenders/multiprocess.js'][43] = 0;
  _$jscoverage['appenders/multiprocess.js'][44] = 0;
  _$jscoverage['appenders/multiprocess.js'][48] = 0;
  _$jscoverage['appenders/multiprocess.js'][54] = 0;
  _$jscoverage['appenders/multiprocess.js'][55] = 0;
  _$jscoverage['appenders/multiprocess.js'][56] = 0;
  _$jscoverage['appenders/multiprocess.js'][57] = 0;
  _$jscoverage['appenders/multiprocess.js'][61] = 0;
  _$jscoverage['appenders/multiprocess.js'][62] = 0;
  _$jscoverage['appenders/multiprocess.js'][64] = 0;
  _$jscoverage['appenders/multiprocess.js'][65] = 0;
  _$jscoverage['appenders/multiprocess.js'][66] = 0;
  _$jscoverage['appenders/multiprocess.js'][69] = 0;
  _$jscoverage['appenders/multiprocess.js'][70] = 0;
  _$jscoverage['appenders/multiprocess.js'][74] = 0;
  _$jscoverage['appenders/multiprocess.js'][75] = 0;
  _$jscoverage['appenders/multiprocess.js'][76] = 0;
  _$jscoverage['appenders/multiprocess.js'][77] = 0;
  _$jscoverage['appenders/multiprocess.js'][79] = 0;
  _$jscoverage['appenders/multiprocess.js'][83] = 0;
  _$jscoverage['appenders/multiprocess.js'][84] = 0;
  _$jscoverage['appenders/multiprocess.js'][85] = 0;
  _$jscoverage['appenders/multiprocess.js'][86] = 0;
  _$jscoverage['appenders/multiprocess.js'][87] = 0;
  _$jscoverage['appenders/multiprocess.js'][88] = 0;
  _$jscoverage['appenders/multiprocess.js'][90] = 0;
  _$jscoverage['appenders/multiprocess.js'][93] = 0;
  _$jscoverage['appenders/multiprocess.js'][94] = 0;
  _$jscoverage['appenders/multiprocess.js'][95] = 0;
}
_$jscoverage['appenders/multiprocess.js'][1]++;
var log4js = require("../log4js");
_$jscoverage['appenders/multiprocess.js'][2]++;
var layouts = require("../layouts");
_$jscoverage['appenders/multiprocess.js'][3]++;
var net = require("net");
_$jscoverage['appenders/multiprocess.js'][4]++;
var util = require("util");
_$jscoverage['appenders/multiprocess.js'][6]++;
var LogServer = (function createLogServer(config) {
  _$jscoverage['appenders/multiprocess.js'][7]++;
  var actualAppender = config.actualAppender;
  _$jscoverage['appenders/multiprocess.js'][8]++;
  var server = net.createServer((function serverCreated(clientSocket) {
  _$jscoverage['appenders/multiprocess.js'][9]++;
  clientSocket.on("connect", (function clientConnected() {
  _$jscoverage['appenders/multiprocess.js'][10]++;
  var logMessage = "", event;
  _$jscoverage['appenders/multiprocess.js'][11]++;
  clientSocket.on("data", (function chunkReceived(chunk) {
  _$jscoverage['appenders/multiprocess.js'][12]++;
  logMessage += chunk;
  _$jscoverage['appenders/multiprocess.js'][13]++;
  if (logMessage.indexOf("__END__\n") > -1) {
    _$jscoverage['appenders/multiprocess.js'][14]++;
    event = logMessage.substring(0, logMessage.indexOf("__END__\n"));
    _$jscoverage['appenders/multiprocess.js'][15]++;
    logMessage = logMessage.substring(logMessage.indexOf("__END__\n") + 8);
    _$jscoverage['appenders/multiprocess.js'][17]++;
    try {
      _$jscoverage['appenders/multiprocess.js'][18]++;
      event = JSON.parse(event);
      _$jscoverage['appenders/multiprocess.js'][19]++;
      deserializeLoggingEvent(event);
      _$jscoverage['appenders/multiprocess.js'][20]++;
      actualAppender(event);
    }
    catch (e) {
      _$jscoverage['appenders/multiprocess.js'][23]++;
      actualAppender(createLoggingEvent("ERROR", "Unable to parse log: " + logMessage));
    }
  }
}));
  _$jscoverage['appenders/multiprocess.js'][28]++;
  clientSocket.on("end", (function gotChunks() {
  _$jscoverage['appenders/multiprocess.js'][29]++;
  try {
    _$jscoverage['appenders/multiprocess.js'][30]++;
    var loggingEvent = JSON.parse(logMessage.substring(0, logMessage.indexOf("__END__\n")));
    _$jscoverage['appenders/multiprocess.js'][31]++;
    deserializeLoggingEvent(loggingEvent);
    _$jscoverage['appenders/multiprocess.js'][32]++;
    actualAppender(loggingEvent);
  }
  catch (e) {
    _$jscoverage['appenders/multiprocess.js'][35]++;
    actualAppender(createLoggingEvent("ERROR", "Unable to parse log: " + logMessage));
  }
}));
}));
}));
  _$jscoverage['appenders/multiprocess.js'][40]++;
  server.listen(config.loggerPort || 5000, config.loggerHost || "localhost");
});
_$jscoverage['appenders/multiprocess.js'][43]++;
function createLoggingEvent(level, message) {
  _$jscoverage['appenders/multiprocess.js'][44]++;
  return ({startTime: new Date(), categoryName: "log4js", level: {toString: (function () {
  _$jscoverage['appenders/multiprocess.js'][48]++;
  return level;
})}, data: [message]});
}
_$jscoverage['appenders/multiprocess.js'][54]++;
function deserializeLoggingEvent(loggingEvent) {
  _$jscoverage['appenders/multiprocess.js'][55]++;
  loggingEvent.startTime = new Date(loggingEvent.startTime);
  _$jscoverage['appenders/multiprocess.js'][56]++;
  loggingEvent.level.toString = (function levelToString() {
  _$jscoverage['appenders/multiprocess.js'][57]++;
  return loggingEvent.level.levelStr;
});
}
_$jscoverage['appenders/multiprocess.js'][61]++;
function workerAppender(config) {
  _$jscoverage['appenders/multiprocess.js'][62]++;
  var socket = net.createConnection(config.loggerPort || 5000, config.loggerHost || "localhost");
  _$jscoverage['appenders/multiprocess.js'][64]++;
  socket.on("close", (function (hadError) {
  _$jscoverage['appenders/multiprocess.js'][65]++;
  if (hadError) {
    _$jscoverage['appenders/multiprocess.js'][66]++;
    socket = net.createConnection(config.loggerPort || 5000, config.loggerHost || "localhost");
  }
}));
  _$jscoverage['appenders/multiprocess.js'][69]++;
  return (function log(loggingEvent) {
  _$jscoverage['appenders/multiprocess.js'][70]++;
  socket.write(JSON.stringify(loggingEvent) + "\n", "utf8");
});
}
_$jscoverage['appenders/multiprocess.js'][74]++;
function createAppender(config) {
  _$jscoverage['appenders/multiprocess.js'][75]++;
  if (config.mode === "master") {
    _$jscoverage['appenders/multiprocess.js'][76]++;
    var server = new LogServer(config);
    _$jscoverage['appenders/multiprocess.js'][77]++;
    return config.actualAppender;
  }
  else {
    _$jscoverage['appenders/multiprocess.js'][79]++;
    return workerAppender(config);
  }
}
_$jscoverage['appenders/multiprocess.js'][83]++;
function configure(config) {
  _$jscoverage['appenders/multiprocess.js'][84]++;
  var actualAppender;
  _$jscoverage['appenders/multiprocess.js'][85]++;
  if (config.appender && config.mode === "master") {
    _$jscoverage['appenders/multiprocess.js'][86]++;
    log4js.loadAppender(config.appender.type);
    _$jscoverage['appenders/multiprocess.js'][87]++;
    actualAppender = log4js.appenderMakers[config.appender.type](config.appender);
    _$jscoverage['appenders/multiprocess.js'][88]++;
    config.actualAppender = actualAppender;
  }
  _$jscoverage['appenders/multiprocess.js'][90]++;
  return createAppender(config);
}
_$jscoverage['appenders/multiprocess.js'][93]++;
exports.name = "multiprocess";
_$jscoverage['appenders/multiprocess.js'][94]++;
exports.appender = createAppender;
_$jscoverage['appenders/multiprocess.js'][95]++;
exports.configure = configure;
_$jscoverage['appenders/multiprocess.js'].source = ["var log4js = require('../log4js');","var layouts = require('../layouts');","var net = require('net');","var util = require('util');","","var LogServer = function createLogServer(config) {","    var actualAppender = config.actualAppender;","    var server = net.createServer(function serverCreated(clientSocket) {","        clientSocket.on('connect', function clientConnected() {","            var logMessage = '', event;","            clientSocket.on('data', function chunkReceived(chunk) {","                logMessage += chunk;","                if (logMessage.indexOf(\"__END__\\n\") &gt; -1) {","                    event = logMessage.substring(0, logMessage.indexOf(\"__END__\\n\"));","                    logMessage = logMessage.substring(logMessage.indexOf(\"__END__\\n\") + 8);","","                    try {","                        event = JSON.parse(event);","                        deserializeLoggingEvent(event);","                        actualAppender(event);","                    } catch (e) {","                        // JSON.parse failed, just log the contents probably a naughty.","                        actualAppender(createLoggingEvent('ERROR', 'Unable to parse log: ' + logMessage));","                    }","                }","            });","","            clientSocket.on('end', function gotChunks() {","                try {","                    var loggingEvent = JSON.parse(logMessage.substring(0, logMessage.indexOf(\"__END__\\n\")));","                    deserializeLoggingEvent(loggingEvent);","                    actualAppender(loggingEvent);","                } catch (e) {","                    // JSON.parse failed, just log the contents probably a naughty.","                    actualAppender(createLoggingEvent('ERROR', 'Unable to parse log: ' + logMessage));","                }","            });","        });","    });","    server.listen(config.loggerPort || 5000, config.loggerHost || 'localhost');","}","","function createLoggingEvent(level, message) {","  return {","    startTime: new Date(),","    categoryName: 'log4js',","    level: { toString: function () {","      return level;","    }},","    data: [ message ]","  };","}","","function deserializeLoggingEvent(loggingEvent) {","  loggingEvent.startTime = new Date(loggingEvent.startTime);","  loggingEvent.level.toString = function levelToString() {","    return loggingEvent.level.levelStr;","  };","}","","function workerAppender(config) {","    var socket = net.createConnection(config.loggerPort || 5000, config.loggerHost || 'localhost');","    //socket may not be ready yet - should do some buffering while waiting for connect event","    socket.on('close', function (hadError) {","        if (hadError) {","            socket = net.createConnection(config.loggerPort || 5000, config.loggerHost || 'localhost');","        }","    });","    return function log(loggingEvent) {","        socket.write(JSON.stringify(loggingEvent) + '\\n', 'utf8');","    };","}","","function createAppender(config) {","  if (config.mode === 'master') {","    var server = new LogServer(config);","    return config.actualAppender;","  } else {","    return workerAppender(config);","  }","}","","function configure(config) {","  var actualAppender;","  if (config.appender &amp;&amp; config.mode === 'master') {","    log4js.loadAppender(config.appender.type);","    actualAppender = log4js.appenderMakers[config.appender.type](config.appender);","    config.actualAppender = actualAppender;","  }","  return createAppender(config);","}","","exports.name = 'multiprocess';","exports.appender = createAppender;","exports.configure = configure;"];
