/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['appenders/file.js']) {
  _$jscoverage['appenders/file.js'] = [];
  _$jscoverage['appenders/file.js'][1] = 0;
  _$jscoverage['appenders/file.js'][13] = 0;
  _$jscoverage['appenders/file.js'][14] = 0;
  _$jscoverage['appenders/file.js'][15] = 0;
  _$jscoverage['appenders/file.js'][16] = 0;
  _$jscoverage['appenders/file.js'][17] = 0;
  _$jscoverage['appenders/file.js'][19] = 0;
  _$jscoverage['appenders/file.js'][21] = 0;
  _$jscoverage['appenders/file.js'][22] = 0;
  _$jscoverage['appenders/file.js'][23] = 0;
  _$jscoverage['appenders/file.js'][24] = 0;
  _$jscoverage['appenders/file.js'][25] = 0;
  _$jscoverage['appenders/file.js'][26] = 0;
  _$jscoverage['appenders/file.js'][30] = 0;
  _$jscoverage['appenders/file.js'][34] = 0;
  _$jscoverage['appenders/file.js'][35] = 0;
  _$jscoverage['appenders/file.js'][36] = 0;
  _$jscoverage['appenders/file.js'][39] = 0;
  _$jscoverage['appenders/file.js'][40] = 0;
  _$jscoverage['appenders/file.js'][41] = 0;
  _$jscoverage['appenders/file.js'][44] = 0;
  _$jscoverage['appenders/file.js'][45] = 0;
  _$jscoverage['appenders/file.js'][46] = 0;
  _$jscoverage['appenders/file.js'][47] = 0;
  _$jscoverage['appenders/file.js'][48] = 0;
  _$jscoverage['appenders/file.js'][50] = 0;
  _$jscoverage['appenders/file.js'][54] = 0;
  _$jscoverage['appenders/file.js'][55] = 0;
  _$jscoverage['appenders/file.js'][56] = 0;
  _$jscoverage['appenders/file.js'][57] = 0;
  _$jscoverage['appenders/file.js'][62] = 0;
  _$jscoverage['appenders/file.js'][69] = 0;
  _$jscoverage['appenders/file.js'][71] = 0;
  _$jscoverage['appenders/file.js'][72] = 0;
  _$jscoverage['appenders/file.js'][74] = 0;
  _$jscoverage['appenders/file.js'][77] = 0;
  _$jscoverage['appenders/file.js'][78] = 0;
  _$jscoverage['appenders/file.js'][79] = 0;
  _$jscoverage['appenders/file.js'][80] = 0;
  _$jscoverage['appenders/file.js'][82] = 0;
  _$jscoverage['appenders/file.js'][86] = 0;
  _$jscoverage['appenders/file.js'][87] = 0;
  _$jscoverage['appenders/file.js'][88] = 0;
  _$jscoverage['appenders/file.js'][89] = 0;
  _$jscoverage['appenders/file.js'][90] = 0;
  _$jscoverage['appenders/file.js'][93] = 0;
  _$jscoverage['appenders/file.js'][94] = 0;
  _$jscoverage['appenders/file.js'][96] = 0;
  _$jscoverage['appenders/file.js'][97] = 0;
  _$jscoverage['appenders/file.js'][98] = 0;
  _$jscoverage['appenders/file.js'][101] = 0;
  _$jscoverage['appenders/file.js'][105] = 0;
  _$jscoverage['appenders/file.js'][108] = 0;
  _$jscoverage['appenders/file.js'][109] = 0;
  _$jscoverage['appenders/file.js'][113] = 0;
  _$jscoverage['appenders/file.js'][114] = 0;
  _$jscoverage['appenders/file.js'][115] = 0;
  _$jscoverage['appenders/file.js'][118] = 0;
  _$jscoverage['appenders/file.js'][119] = 0;
  _$jscoverage['appenders/file.js'][121] = 0;
  _$jscoverage['appenders/file.js'][122] = 0;
  _$jscoverage['appenders/file.js'][123] = 0;
  _$jscoverage['appenders/file.js'][124] = 0;
  _$jscoverage['appenders/file.js'][128] = 0;
  _$jscoverage['appenders/file.js'][129] = 0;
  _$jscoverage['appenders/file.js'][133] = 0;
  _$jscoverage['appenders/file.js'][134] = 0;
  _$jscoverage['appenders/file.js'][135] = 0;
  _$jscoverage['appenders/file.js'][136] = 0;
  _$jscoverage['appenders/file.js'][138] = 0;
  _$jscoverage['appenders/file.js'][141] = 0;
  _$jscoverage['appenders/file.js'][142] = 0;
  _$jscoverage['appenders/file.js'][143] = 0;
}
_$jscoverage['appenders/file.js'][1]++;
var layouts = require("../layouts"), path = require("path"), fs = require("fs");
_$jscoverage['appenders/file.js'][13]++;
function fileAppender(file, layout, logSize, numBackups) {
  _$jscoverage['appenders/file.js'][14]++;
  var bytesWritten = 0;
  _$jscoverage['appenders/file.js'][15]++;
  file = path.normalize(file);
  _$jscoverage['appenders/file.js'][16]++;
  layout = layout || layouts.basicLayout;
  _$jscoverage['appenders/file.js'][17]++;
  numBackups = numBackups === undefined? 5: numBackups;
  _$jscoverage['appenders/file.js'][19]++;
  numBackups = numBackups === 0? 1: numBackups;
  _$jscoverage['appenders/file.js'][21]++;
  function setupLogRolling() {
    _$jscoverage['appenders/file.js'][22]++;
    try {
      _$jscoverage['appenders/file.js'][23]++;
      var stat = fs.statSync(file);
      _$jscoverage['appenders/file.js'][24]++;
      bytesWritten = stat.size;
      _$jscoverage['appenders/file.js'][25]++;
      if (bytesWritten >= logSize) {
        _$jscoverage['appenders/file.js'][26]++;
        rollThatLog();
      }
    }
    catch (e) {
      _$jscoverage['appenders/file.js'][30]++;
      bytesWritten = 0;
    }
}
  _$jscoverage['appenders/file.js'][34]++;
  function rollThatLog() {
    _$jscoverage['appenders/file.js'][35]++;
    function index(filename) {
      _$jscoverage['appenders/file.js'][36]++;
      return parseInt(filename.substring((path.basename(file) + ".").length), 10) || 0;
}
    _$jscoverage['appenders/file.js'][39]++;
    var nameMatcher = new RegExp("^" + path.basename(file));
    _$jscoverage['appenders/file.js'][40]++;
    function justTheLogFiles(item) {
      _$jscoverage['appenders/file.js'][41]++;
      return nameMatcher.test(item);
}
    _$jscoverage['appenders/file.js'][44]++;
    function byIndex(a, b) {
      _$jscoverage['appenders/file.js'][45]++;
      if (index(a) > index(b)) {
        _$jscoverage['appenders/file.js'][46]++;
        return 1;
      }
      else {
        _$jscoverage['appenders/file.js'][47]++;
        if (index(a) < index(b)) {
          _$jscoverage['appenders/file.js'][48]++;
          return -1;
        }
        else {
          _$jscoverage['appenders/file.js'][50]++;
          return 0;
        }
      }
}
    _$jscoverage['appenders/file.js'][54]++;
    function increaseFileIndex(fileToRename) {
      _$jscoverage['appenders/file.js'][55]++;
      var idx = index(fileToRename);
      _$jscoverage['appenders/file.js'][56]++;
      if (idx < numBackups) {
        _$jscoverage['appenders/file.js'][57]++;
        fs.renameSync(path.join(path.dirname(file), fileToRename), file + "." + (idx + 1));
      }
}
    _$jscoverage['appenders/file.js'][62]++;
    fs.readdirSync(path.dirname(file)).filter(justTheLogFiles).sort(byIndex).reverse().forEach(increaseFileIndex);
    _$jscoverage['appenders/file.js'][69]++;
    var newLogFileFD = fs.openSync(file, "a", 420), oldLogFileFD = logFile.fd;
    _$jscoverage['appenders/file.js'][71]++;
    logFile.fd = newLogFileFD;
    _$jscoverage['appenders/file.js'][72]++;
    fs.close(oldLogFileFD);
    _$jscoverage['appenders/file.js'][74]++;
    bytesWritten = 0;
}
  _$jscoverage['appenders/file.js'][77]++;
  function fileExists(filename) {
    _$jscoverage['appenders/file.js'][78]++;
    try {
      _$jscoverage['appenders/file.js'][79]++;
      fs.statSync(filename);
      _$jscoverage['appenders/file.js'][80]++;
      return true;
    }
    catch (e) {
      _$jscoverage['appenders/file.js'][82]++;
      return false;
    }
}
  _$jscoverage['appenders/file.js'][86]++;
  function openTheStream() {
    _$jscoverage['appenders/file.js'][87]++;
    var stream = fs.createWriteStream(file, {flags: "a", mode: 420, encoding: "utf8"});
    _$jscoverage['appenders/file.js'][88]++;
    stream.on("open", (function () {
  _$jscoverage['appenders/file.js'][89]++;
  if (logEventBuffer.length > 0) {
    _$jscoverage['appenders/file.js'][90]++;
    writeToLog(logEventBuffer.shift());
  }
}));
    _$jscoverage['appenders/file.js'][93]++;
    stream.on("error", (function (err) {
  _$jscoverage['appenders/file.js'][94]++;
  console.error("log4js.fileAppender - Writing to file %s, error happened ", file, err);
}));
    _$jscoverage['appenders/file.js'][96]++;
    stream.on("drain", (function () {
  _$jscoverage['appenders/file.js'][97]++;
  if (logEventBuffer.length > 0) {
    _$jscoverage['appenders/file.js'][98]++;
    writeToLog(logEventBuffer.shift());
  }
}));
    _$jscoverage['appenders/file.js'][101]++;
    return stream;
}
  _$jscoverage['appenders/file.js'][105]++;
  var logEventBuffer = [], logFile = openTheStream();
  _$jscoverage['appenders/file.js'][108]++;
  if (logSize > 0) {
    _$jscoverage['appenders/file.js'][109]++;
    setupLogRolling();
  }
  _$jscoverage['appenders/file.js'][113]++;
  process.on("exit", (function () {
  _$jscoverage['appenders/file.js'][114]++;
  logFile.end();
  _$jscoverage['appenders/file.js'][115]++;
  logFile.destroy();
}));
  _$jscoverage['appenders/file.js'][118]++;
  function writeToLog(loggingEvent) {
    _$jscoverage['appenders/file.js'][119]++;
    var logMessage = layout(loggingEvent) + "\n";
    _$jscoverage['appenders/file.js'][121]++;
    bytesWritten += logMessage.length;
    _$jscoverage['appenders/file.js'][122]++;
    logFile.write(logMessage, "utf8");
    _$jscoverage['appenders/file.js'][123]++;
    if (bytesWritten >= logSize) {
      _$jscoverage['appenders/file.js'][124]++;
      rollThatLog();
    }
}
  _$jscoverage['appenders/file.js'][128]++;
  return (function (loggingEvent) {
  _$jscoverage['appenders/file.js'][129]++;
  logEventBuffer.push(loggingEvent);
});
}
_$jscoverage['appenders/file.js'][133]++;
function configure(config) {
  _$jscoverage['appenders/file.js'][134]++;
  var layout;
  _$jscoverage['appenders/file.js'][135]++;
  if (config.layout) {
    _$jscoverage['appenders/file.js'][136]++;
    layout = layouts.layout(config.layout.type, config.layout);
  }
  _$jscoverage['appenders/file.js'][138]++;
  return fileAppender(config.filename, layout, config.maxLogSize, config.backups);
}
_$jscoverage['appenders/file.js'][141]++;
exports.name = "file";
_$jscoverage['appenders/file.js'][142]++;
exports.appender = fileAppender;
_$jscoverage['appenders/file.js'][143]++;
exports.configure = configure;
_$jscoverage['appenders/file.js'].source = ["var layouts = require('../layouts')",", path = require('path')",", fs = require('fs');","","/**"," * File Appender writing the logs to a text file. Supports rolling of logs by size."," *"," * @param file file log messages will be written to"," * @param layout a function that takes a logevent and returns a string (defaults to basicLayout)."," * @param logSize - the maximum size (in bytes) for a log file, if not provided then logs won't be rotated."," * @param numBackups - the number of log files to keep after logSize has been reached (default 5)"," */","function fileAppender (file, layout, logSize, numBackups) {","    var bytesWritten = 0;","    file = path.normalize(file);","    layout = layout || layouts.basicLayout;","    numBackups = numBackups === undefined ? 5 : numBackups;","    //there has to be at least one backup if logSize has been specified","    numBackups = numBackups === 0 ? 1 : numBackups;","","    function setupLogRolling () {","        try {","            var stat = fs.statSync(file);","            bytesWritten = stat.size;","            if (bytesWritten &gt;= logSize) {","                rollThatLog();","            }","        } catch (e) {","            //file does not exist","            bytesWritten = 0;","        }","    }","","    function rollThatLog () {","        function index(filename) {","            return parseInt(filename.substring((path.basename(file) + '.').length), 10) || 0;","        }","","        var nameMatcher = new RegExp('^' + path.basename(file));","        function justTheLogFiles (item) {","            return nameMatcher.test(item);","        }","","        function byIndex(a, b) {","            if (index(a) &gt; index(b)) {","                return 1;","            } else if (index(a) &lt; index(b) ) {","                return -1;","            } else {","                return 0;","            }","        }","","        function increaseFileIndex (fileToRename) {","            var idx = index(fileToRename);","            if (idx &lt; numBackups) {","                fs.renameSync(path.join(path.dirname(file), fileToRename), file + '.' + (idx + 1));","            }","        }","","        //roll the backups (rename file.n to file.n+1, where n &lt;= numBackups)","        fs.readdirSync(path.dirname(file))","          .filter(justTheLogFiles)","            .sort(byIndex)","              .reverse()","                .forEach(increaseFileIndex);","","        //let's make a new file","        var newLogFileFD = fs.openSync(file, 'a', 0644)","      , oldLogFileFD = logFile.fd;","        logFile.fd = newLogFileFD;","        fs.close(oldLogFileFD);","        //reset the counter","        bytesWritten = 0;","    }","","    function fileExists (filename) {","        try {","            fs.statSync(filename);","            return true;","        } catch (e) {","            return false;","        }","    }","","    function openTheStream() {","        var stream = fs.createWriteStream(file, { flags: 'a', mode: 0644, encoding: 'utf8' });","        stream.on(\"open\", function() {","            if (logEventBuffer.length &gt; 0) {","                writeToLog(logEventBuffer.shift());","            }","        });","        stream.on(\"error\", function (err) {","            console.error(\"log4js.fileAppender - Writing to file %s, error happened \", file, err);","        });","        stream.on(\"drain\", function() {","            if (logEventBuffer.length &gt; 0) {","                writeToLog(logEventBuffer.shift());","            }","        });","        return stream;","    }","","","    var logEventBuffer = []","  , logFile = openTheStream();","","    if (logSize &gt; 0) {","        setupLogRolling();","    }","","    //close the file on process exit.","    process.on('exit', function() {","        logFile.end();","        logFile.destroy();","    });","","    function writeToLog(loggingEvent) {","        var logMessage = layout(loggingEvent)+'\\n';","        //not entirely accurate, but it'll do.","        bytesWritten += logMessage.length;","        logFile.write(logMessage, \"utf8\");","        if (bytesWritten &gt;= logSize) {","            rollThatLog();","        }","    }","","    return function(loggingEvent) {","        logEventBuffer.push(loggingEvent);","    };","}","","function configure(config) {","    var layout;","    if (config.layout) {","\tlayout = layouts.layout(config.layout.type, config.layout);","    }","    return fileAppender(config.filename, layout, config.maxLogSize, config.backups);","}","","exports.name = \"file\";","exports.appender = fileAppender;","exports.configure = configure;"];
