/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['layouts.js']) {
  _$jscoverage['layouts.js'] = [];
  _$jscoverage['layouts.js'][1] = 0;
  _$jscoverage['layouts.js'][5] = 0;
  _$jscoverage['layouts.js'][6] = 0;
  _$jscoverage['layouts.js'][7] = 0;
  _$jscoverage['layouts.js'][8] = 0;
  _$jscoverage['layouts.js'][10] = 0;
  _$jscoverage['layouts.js'][11] = 0;
  _$jscoverage['layouts.js'][26] = 0;
  _$jscoverage['layouts.js'][27] = 0;
  _$jscoverage['layouts.js'][31] = 0;
  _$jscoverage['layouts.js'][32] = 0;
  _$jscoverage['layouts.js'][33] = 0;
  _$jscoverage['layouts.js'][34] = 0;
  _$jscoverage['layouts.js'][35] = 0;
  _$jscoverage['layouts.js'][36] = 0;
  _$jscoverage['layouts.js'][38] = 0;
  _$jscoverage['layouts.js'][39] = 0;
  _$jscoverage['layouts.js'][43] = 0;
  _$jscoverage['layouts.js'][46] = 0;
  _$jscoverage['layouts.js'][47] = 0;
  _$jscoverage['layouts.js'][48] = 0;
  _$jscoverage['layouts.js'][50] = 0;
  _$jscoverage['layouts.js'][51] = 0;
  _$jscoverage['layouts.js'][53] = 0;
  _$jscoverage['layouts.js'][57] = 0;
  _$jscoverage['layouts.js'][63] = 0;
  _$jscoverage['layouts.js'][64] = 0;
  _$jscoverage['layouts.js'][82] = 0;
  _$jscoverage['layouts.js'][86] = 0;
  _$jscoverage['layouts.js'][87] = 0;
  _$jscoverage['layouts.js'][96] = 0;
  _$jscoverage['layouts.js'][108] = 0;
  _$jscoverage['layouts.js'][109] = 0;
  _$jscoverage['layouts.js'][116] = 0;
  _$jscoverage['layouts.js'][117] = 0;
  _$jscoverage['layouts.js'][120] = 0;
  _$jscoverage['layouts.js'][121] = 0;
  _$jscoverage['layouts.js'][139] = 0;
  _$jscoverage['layouts.js'][140] = 0;
  _$jscoverage['layouts.js'][141] = 0;
  _$jscoverage['layouts.js'][143] = 0;
  _$jscoverage['layouts.js'][145] = 0;
  _$jscoverage['layouts.js'][146] = 0;
  _$jscoverage['layouts.js'][147] = 0;
  _$jscoverage['layouts.js'][148] = 0;
  _$jscoverage['layouts.js'][150] = 0;
  _$jscoverage['layouts.js'][151] = 0;
  _$jscoverage['layouts.js'][152] = 0;
  _$jscoverage['layouts.js'][153] = 0;
  _$jscoverage['layouts.js'][154] = 0;
  _$jscoverage['layouts.js'][155] = 0;
  _$jscoverage['layouts.js'][156] = 0;
  _$jscoverage['layouts.js'][159] = 0;
  _$jscoverage['layouts.js'][160] = 0;
  _$jscoverage['layouts.js'][164] = 0;
  _$jscoverage['layouts.js'][165] = 0;
  _$jscoverage['layouts.js'][167] = 0;
  _$jscoverage['layouts.js'][168] = 0;
  _$jscoverage['layouts.js'][169] = 0;
  _$jscoverage['layouts.js'][170] = 0;
  _$jscoverage['layouts.js'][171] = 0;
  _$jscoverage['layouts.js'][172] = 0;
  _$jscoverage['layouts.js'][174] = 0;
  _$jscoverage['layouts.js'][177] = 0;
  _$jscoverage['layouts.js'][179] = 0;
  _$jscoverage['layouts.js'][181] = 0;
  _$jscoverage['layouts.js'][182] = 0;
  _$jscoverage['layouts.js'][183] = 0;
  _$jscoverage['layouts.js'][185] = 0;
  _$jscoverage['layouts.js'][186] = 0;
  _$jscoverage['layouts.js'][187] = 0;
  _$jscoverage['layouts.js'][188] = 0;
  _$jscoverage['layouts.js'][189] = 0;
  _$jscoverage['layouts.js'][190] = 0;
  _$jscoverage['layouts.js'][194] = 0;
  _$jscoverage['layouts.js'][195] = 0;
  _$jscoverage['layouts.js'][197] = 0;
  _$jscoverage['layouts.js'][198] = 0;
  _$jscoverage['layouts.js'][200] = 0;
  _$jscoverage['layouts.js'][201] = 0;
  _$jscoverage['layouts.js'][203] = 0;
  _$jscoverage['layouts.js'][204] = 0;
  _$jscoverage['layouts.js'][206] = 0;
  _$jscoverage['layouts.js'][207] = 0;
  _$jscoverage['layouts.js'][209] = 0;
  _$jscoverage['layouts.js'][210] = 0;
  _$jscoverage['layouts.js'][212] = 0;
  _$jscoverage['layouts.js'][213] = 0;
  _$jscoverage['layouts.js'][218] = 0;
  _$jscoverage['layouts.js'][221] = 0;
  _$jscoverage['layouts.js'][222] = 0;
  _$jscoverage['layouts.js'][223] = 0;
  _$jscoverage['layouts.js'][226] = 0;
  _$jscoverage['layouts.js'][227] = 0;
  _$jscoverage['layouts.js'][228] = 0;
  _$jscoverage['layouts.js'][230] = 0;
  _$jscoverage['layouts.js'][231] = 0;
  _$jscoverage['layouts.js'][234] = 0;
  _$jscoverage['layouts.js'][236] = 0;
  _$jscoverage['layouts.js'][237] = 0;
  _$jscoverage['layouts.js'][241] = 0;
  _$jscoverage['layouts.js'][243] = 0;
  _$jscoverage['layouts.js'][245] = 0;
  _$jscoverage['layouts.js'][248] = 0;
  _$jscoverage['layouts.js'][251] = 0;
  _$jscoverage['layouts.js'][258] = 0;
}
_$jscoverage['layouts.js'][1]++;
var dateFormat = require("./date_format"), util = require("util"), replacementRegExp = /%[sdj]/g, layoutMakers = {"messagePassThrough": (function () {
  _$jscoverage['layouts.js'][5]++;
  return messagePassThroughLayout;
}), "basic": (function () {
  _$jscoverage['layouts.js'][6]++;
  return basicLayout;
}), "colored": (function () {
  _$jscoverage['layouts.js'][7]++;
  return colouredLayout;
}), "coloured": (function () {
  _$jscoverage['layouts.js'][8]++;
  return colouredLayout;
}), "pattern": (function (config) {
  _$jscoverage['layouts.js'][10]++;
  var pattern = config.pattern || undefined;
  _$jscoverage['layouts.js'][11]++;
  return patternLayout(pattern);
})}, colours = {ALL: "grey", TRACE: "blue", DEBUG: "cyan", INFO: "green", WARN: "yellow", ERROR: "red", FATAL: "magenta", OFF: "grey"};
_$jscoverage['layouts.js'][26]++;
function formatLogData(logData) {
  _$jscoverage['layouts.js'][27]++;
  var output = "", data = Array.isArray(logData)? logData.slice(): Array.prototype.slice.call(arguments), format = data.shift();
  _$jscoverage['layouts.js'][31]++;
  if (typeof format === "string") {
    _$jscoverage['layouts.js'][32]++;
    output = format.replace(replacementRegExp, (function (match) {
  _$jscoverage['layouts.js'][33]++;
  switch (match) {
  case "%s":
    _$jscoverage['layouts.js'][34]++;
    return new String(data.shift());
  case "%d":
    _$jscoverage['layouts.js'][35]++;
    return new Number(data.shift());
  case "%j":
    _$jscoverage['layouts.js'][36]++;
    return JSON.stringify(data.shift());
  default:
    _$jscoverage['layouts.js'][38]++;
    return match;
  }
  _$jscoverage['layouts.js'][39]++;
  ;
}));
  }
  else {
    _$jscoverage['layouts.js'][43]++;
    data.unshift(format);
  }
  _$jscoverage['layouts.js'][46]++;
  data.forEach((function (item) {
  _$jscoverage['layouts.js'][47]++;
  if (output) {
    _$jscoverage['layouts.js'][48]++;
    output += " ";
  }
  _$jscoverage['layouts.js'][50]++;
  if (item && item.stack) {
    _$jscoverage['layouts.js'][51]++;
    output += item.stack;
  }
  else {
    _$jscoverage['layouts.js'][53]++;
    output += util.inspect(item);
  }
}));
  _$jscoverage['layouts.js'][57]++;
  return output;
}
_$jscoverage['layouts.js'][63]++;
function colorize(str, style) {
  _$jscoverage['layouts.js'][64]++;
  var styles = {"bold": [1, 22], "italic": [3, 23], "underline": [4, 24], "inverse": [7, 27], "white": [37, 39], "grey": [90, 39], "black": [90, 39], "blue": [34, 39], "cyan": [36, 39], "green": [32, 39], "magenta": [35, 39], "red": [31, 39], "yellow": [33, 39]};
  _$jscoverage['layouts.js'][82]++;
  return style? "\u001b[" + styles[style][0] + "m" + str + "\u001b[" + styles[style][1] + "m": str;
}
_$jscoverage['layouts.js'][86]++;
function timestampLevelAndCategory(loggingEvent, colour) {
  _$jscoverage['layouts.js'][87]++;
  var output = colorize(formatLogData("[%s] [%s] %s - ", dateFormat.asString(loggingEvent.startTime), loggingEvent.level, loggingEvent.categoryName), colour);
  _$jscoverage['layouts.js'][96]++;
  return output;
}
_$jscoverage['layouts.js'][108]++;
function basicLayout(loggingEvent) {
  _$jscoverage['layouts.js'][109]++;
  return timestampLevelAndCategory(loggingEvent) + formatLogData(loggingEvent.data);
}
_$jscoverage['layouts.js'][116]++;
function colouredLayout(loggingEvent) {
  _$jscoverage['layouts.js'][117]++;
  return timestampLevelAndCategory(loggingEvent, colours[loggingEvent.level.toString()]) + formatLogData(loggingEvent.data);
}
_$jscoverage['layouts.js'][120]++;
function messagePassThroughLayout(loggingEvent) {
  _$jscoverage['layouts.js'][121]++;
  return formatLogData(loggingEvent.data);
}
_$jscoverage['layouts.js'][139]++;
function patternLayout(pattern) {
  _$jscoverage['layouts.js'][140]++;
  var TTCC_CONVERSION_PATTERN = "%r %p %c - %m%n";
  _$jscoverage['layouts.js'][141]++;
  var regex = /%(-?[0-9]+)?(\.?[0-9]+)?([cdmnpr%])(\{([^\}]+)\})?|([^%]+)/;
  _$jscoverage['layouts.js'][143]++;
  pattern = pattern || TTCC_CONVERSION_PATTERN;
  _$jscoverage['layouts.js'][145]++;
  return (function (loggingEvent) {
  _$jscoverage['layouts.js'][146]++;
  var formattedString = "";
  _$jscoverage['layouts.js'][147]++;
  var result;
  _$jscoverage['layouts.js'][148]++;
  var searchString = pattern;
  _$jscoverage['layouts.js'][150]++;
  while ((result = regex.exec(searchString))) {
    _$jscoverage['layouts.js'][151]++;
    var matchedString = result[0];
    _$jscoverage['layouts.js'][152]++;
    var padding = result[1];
    _$jscoverage['layouts.js'][153]++;
    var truncation = result[2];
    _$jscoverage['layouts.js'][154]++;
    var conversionCharacter = result[3];
    _$jscoverage['layouts.js'][155]++;
    var specifier = result[5];
    _$jscoverage['layouts.js'][156]++;
    var text = result[6];
    _$jscoverage['layouts.js'][159]++;
    if (text) {
      _$jscoverage['layouts.js'][160]++;
      formattedString += "" + text;
    }
    else {
      _$jscoverage['layouts.js'][164]++;
      var replacement = "";
      _$jscoverage['layouts.js'][165]++;
      switch (conversionCharacter) {
      case "c":
        _$jscoverage['layouts.js'][167]++;
        var loggerName = loggingEvent.categoryName;
        _$jscoverage['layouts.js'][168]++;
        if (specifier) {
          _$jscoverage['layouts.js'][169]++;
          var precision = parseInt(specifier, 10);
          _$jscoverage['layouts.js'][170]++;
          var loggerNameBits = loggingEvent.categoryName.split(".");
          _$jscoverage['layouts.js'][171]++;
          if (precision >= loggerNameBits.length) {
            _$jscoverage['layouts.js'][172]++;
            replacement = loggerName;
          }
          else {
            _$jscoverage['layouts.js'][174]++;
            replacement = loggerNameBits.slice(loggerNameBits.length - precision).join(".");
          }
        }
        else {
          _$jscoverage['layouts.js'][177]++;
          replacement = loggerName;
        }
        _$jscoverage['layouts.js'][179]++;
        break;
      case "d":
        _$jscoverage['layouts.js'][181]++;
        var format = dateFormat.ISO8601_FORMAT;
        _$jscoverage['layouts.js'][182]++;
        if (specifier) {
          _$jscoverage['layouts.js'][183]++;
          format = specifier;
          _$jscoverage['layouts.js'][185]++;
          if (format == "ISO8601") {
            _$jscoverage['layouts.js'][186]++;
            format = dateFormat.ISO8601_FORMAT;
          }
          else {
            _$jscoverage['layouts.js'][187]++;
            if (format == "ABSOLUTE") {
              _$jscoverage['layouts.js'][188]++;
              format = dateFormat.ABSOLUTETIME_FORMAT;
            }
            else {
              _$jscoverage['layouts.js'][189]++;
              if (format == "DATE") {
                _$jscoverage['layouts.js'][190]++;
                format = dateFormat.DATETIME_FORMAT;
              }
            }
          }
        }
        _$jscoverage['layouts.js'][194]++;
        replacement = dateFormat.asString(format, loggingEvent.startTime);
        _$jscoverage['layouts.js'][195]++;
        break;
      case "m":
        _$jscoverage['layouts.js'][197]++;
        replacement = formatLogData(loggingEvent.data);
        _$jscoverage['layouts.js'][198]++;
        break;
      case "n":
        _$jscoverage['layouts.js'][200]++;
        replacement = "\n";
        _$jscoverage['layouts.js'][201]++;
        break;
      case "p":
        _$jscoverage['layouts.js'][203]++;
        replacement = loggingEvent.level.toString();
        _$jscoverage['layouts.js'][204]++;
        break;
      case "r":
        _$jscoverage['layouts.js'][206]++;
        replacement = "" + loggingEvent.startTime.toLocaleTimeString();
        _$jscoverage['layouts.js'][207]++;
        break;
      case "%":
        _$jscoverage['layouts.js'][209]++;
        replacement = "%";
        _$jscoverage['layouts.js'][210]++;
        break;
      default:
        _$jscoverage['layouts.js'][212]++;
        replacement = matchedString;
        _$jscoverage['layouts.js'][213]++;
        break;
      }
      _$jscoverage['layouts.js'][218]++;
      var len;
      _$jscoverage['layouts.js'][221]++;
      if (truncation) {
        _$jscoverage['layouts.js'][222]++;
        len = parseInt(truncation.substr(1), 10);
        _$jscoverage['layouts.js'][223]++;
        replacement = replacement.substring(0, len);
      }
      _$jscoverage['layouts.js'][226]++;
      if (padding) {
        _$jscoverage['layouts.js'][227]++;
        if (padding.charAt(0) == "-") {
          _$jscoverage['layouts.js'][228]++;
          len = parseInt(padding.substr(1), 10);
          _$jscoverage['layouts.js'][230]++;
          while (replacement.length < len) {
            _$jscoverage['layouts.js'][231]++;
            replacement += " ";
}
        }
        else {
          _$jscoverage['layouts.js'][234]++;
          len = parseInt(padding, 10);
          _$jscoverage['layouts.js'][236]++;
          while (replacement.length < len) {
            _$jscoverage['layouts.js'][237]++;
            replacement = " " + replacement;
}
        }
      }
      _$jscoverage['layouts.js'][241]++;
      formattedString += replacement;
    }
    _$jscoverage['layouts.js'][243]++;
    searchString = searchString.substr(result.index + result[0].length);
}
  _$jscoverage['layouts.js'][245]++;
  return formattedString;
});
}
_$jscoverage['layouts.js'][248]++;
;
_$jscoverage['layouts.js'][251]++;
module.exports = {basicLayout: basicLayout, messagePassThroughLayout: messagePassThroughLayout, patternLayout: patternLayout, colouredLayout: colouredLayout, coloredLayout: colouredLayout, layout: (function (name, config) {
  _$jscoverage['layouts.js'][258]++;
  return layoutMakers[name] && layoutMakers[name](config);
})};
_$jscoverage['layouts.js'].source = ["var dateFormat = require('./date_format')",", util = require('util')",", replacementRegExp = /%[sdj]/g",", layoutMakers = {","    \"messagePassThrough\": function() { return messagePassThroughLayout; }","  , \"basic\": function() { return basicLayout; }","  , \"colored\": function() { return colouredLayout; }","  , \"coloured\": function() { return colouredLayout; }","  , \"pattern\": function (config) {","\tvar pattern = config.pattern || undefined;","\treturn patternLayout(pattern);","    }","}",", colours = {","    ALL: \"grey\"","  , TRACE: \"blue\"","  , DEBUG: \"cyan\"","  , INFO: \"green\"","  , WARN: \"yellow\"","  , ERROR: \"red\"","  , FATAL: \"magenta\"","  , OFF: \"grey\"","};","","","function formatLogData(logData) {","    var output = \"\"","    , data = Array.isArray(logData) ? logData.slice() : Array.prototype.slice.call(arguments)","    , format = data.shift();","","    if (typeof format  === \"string\") {","        output = format.replace(replacementRegExp, function(match) {","            switch (match) {","            case \"%s\": return new String(data.shift());","            case \"%d\": return new Number(data.shift());","            case \"%j\": return JSON.stringify(data.shift());","            default:","                return match;","            };","        });","    } else {","        //put it back, it's not a format string","        data.unshift(format);","    }","","    data.forEach(function (item) {","        if (output) {","            output += ' ';","        }","        if (item &amp;&amp; item.stack) {","            output += item.stack;","        } else {","            output += util.inspect(item);","        }","    });","","    return output;","}","","/**"," * Taken from masylum's fork (https://github.com/masylum/log4js-node)"," */","function colorize (str, style) {","    var styles = {","        //styles","        'bold'      : [1,  22],","        'italic'    : [3,  23],","        'underline' : [4,  24],","        'inverse'   : [7,  27],","        //grayscale","        'white'     : [37, 39],","        'grey'      : [90, 39],","        'black'     : [90, 39],","        //colors","        'blue'      : [34, 39],","        'cyan'      : [36, 39],","        'green'     : [32, 39],","        'magenta'   : [35, 39],","        'red'       : [31, 39],","        'yellow'    : [33, 39]","    };","    return style ? '\\033[' + styles[style][0] + 'm' + str +","        '\\033[' + styles[style][1] + 'm' : str;","}","","function timestampLevelAndCategory(loggingEvent, colour) {","    var output = colorize(","        formatLogData(","            '[%s] [%s] %s - '","          , dateFormat.asString(loggingEvent.startTime)","          , loggingEvent.level","          , loggingEvent.categoryName","        )","      , colour","    );","    return output;","}","","/**"," * BasicLayout is a simple layout for storing the logs. The logs are stored"," * in following format:"," * &lt;pre&gt;"," * [startTime] [logLevel] categoryName - message\\n"," * &lt;/pre&gt;"," *"," * @author Stephan Strittmatter"," */","function basicLayout (loggingEvent) {","    return timestampLevelAndCategory(loggingEvent) + formatLogData(loggingEvent.data);","}","","/**"," * colouredLayout - taken from masylum's fork."," * same as basicLayout, but with colours."," */","function colouredLayout (loggingEvent) {","    return timestampLevelAndCategory(loggingEvent, colours[loggingEvent.level.toString()]) + formatLogData(loggingEvent.data);","}","","function messagePassThroughLayout (loggingEvent) {","    return formatLogData(loggingEvent.data);","}","","/**"," * PatternLayout"," * Format for specifiers is %[padding].[truncation][field]{[format]}"," * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10"," * Fields can be any of:"," *  - %r time in toLocaleTimeString format"," *  - %p log level"," *  - %c log category"," *  - %m log data"," *  - %d date in various formats"," *  - %% %"," *  - %n newline"," * Takes a pattern string and returns a layout function."," * @author Stephan Strittmatter"," */","function patternLayout (pattern) {","    var TTCC_CONVERSION_PATTERN  = \"%r %p %c - %m%n\";","    var regex = /%(-?[0-9]+)?(\\.?[0-9]+)?([cdmnpr%])(\\{([^\\}]+)\\})?|([^%]+)/;","","    pattern = pattern || TTCC_CONVERSION_PATTERN;","","    return function(loggingEvent) {","\tvar formattedString = \"\";","\tvar result;","\tvar searchString = pattern;","","\twhile ((result = regex.exec(searchString))) {","\t    var matchedString = result[0];","\t    var padding = result[1];","\t    var truncation = result[2];","\t    var conversionCharacter = result[3];","\t    var specifier = result[5];","\t    var text = result[6];","","\t    // Check if the pattern matched was just normal text","\t    if (text) {","\t\tformattedString += \"\" + text;","\t    } else {","\t\t// Create a raw replacement string based on the conversion","\t\t// character and specifier","\t\tvar replacement = \"\";","\t\tswitch(conversionCharacter) {","\t\tcase \"c\":","\t\t    var loggerName = loggingEvent.categoryName;","\t\t    if (specifier) {","\t\t\tvar precision = parseInt(specifier, 10);","\t\t\tvar loggerNameBits = loggingEvent.categoryName.split(\".\");","\t\t\tif (precision &gt;= loggerNameBits.length) {","\t\t\t    replacement = loggerName;","\t\t\t} else {","\t\t\t    replacement = loggerNameBits.slice(loggerNameBits.length - precision).join(\".\");","\t\t\t}","\t\t    } else {","\t\t\treplacement = loggerName;","\t\t    }","\t\t    break;","\t\tcase \"d\":","\t\t    var format = dateFormat.ISO8601_FORMAT;","\t\t    if (specifier) {","\t\t\tformat = specifier;","\t\t\t// Pick up special cases","\t\t\tif (format == \"ISO8601\") {","\t\t\t    format = dateFormat.ISO8601_FORMAT;","\t\t\t} else if (format == \"ABSOLUTE\") {","\t\t\t    format = dateFormat.ABSOLUTETIME_FORMAT;","\t\t\t} else if (format == \"DATE\") {","\t\t\t    format = dateFormat.DATETIME_FORMAT;","\t\t\t}","\t\t    }","\t\t    // Format the date","\t\t    replacement = dateFormat.asString(format, loggingEvent.startTime);","\t\t    break;","\t\tcase \"m\":","\t\t    replacement = formatLogData(loggingEvent.data);","\t\t    break;","\t\tcase \"n\":","\t\t    replacement = \"\\n\";","\t\t    break;","\t\tcase \"p\":","\t\t    replacement = loggingEvent.level.toString();","\t\t    break;","\t\tcase \"r\":","\t\t    replacement = \"\" + loggingEvent.startTime.toLocaleTimeString();","\t\t    break;","\t\tcase \"%\":","\t\t    replacement = \"%\";","\t\t    break;","\t\tdefault:","\t\t    replacement = matchedString;","\t\t    break;","\t\t}","\t\t// Format the replacement according to any padding or","\t\t// truncation specified","","\t\tvar len;","","\t\t// First, truncation","\t\tif (truncation) {","\t\t    len = parseInt(truncation.substr(1), 10);","\t\t    replacement = replacement.substring(0, len);","\t\t}","\t\t// Next, padding","\t\tif (padding) {","\t\t    if (padding.charAt(0) == \"-\") {","\t\t\tlen = parseInt(padding.substr(1), 10);","\t\t\t// Right pad with spaces","\t\t\twhile (replacement.length &lt; len) {","\t\t\t    replacement += \" \";","\t\t\t}","\t\t    } else {","\t\t\tlen = parseInt(padding, 10);","\t\t\t// Left pad with spaces","\t\t\twhile (replacement.length &lt; len) {","\t\t\t    replacement = \" \" + replacement;","\t\t\t}","\t\t    }","\t\t}","\t\tformattedString += replacement;","\t    }","\t    searchString = searchString.substr(result.index + result[0].length);","\t}","\treturn formattedString;","    };","","};","","","module.exports = {","    basicLayout: basicLayout","  , messagePassThroughLayout: messagePassThroughLayout","  , patternLayout: patternLayout","  , colouredLayout: colouredLayout","  , coloredLayout: colouredLayout","  , layout: function(name, config) {","        return layoutMakers[name] &amp;&amp; layoutMakers[name](config);","    }","};"];
