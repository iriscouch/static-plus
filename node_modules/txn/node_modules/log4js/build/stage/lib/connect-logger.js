/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['connect-logger.js']) {
  _$jscoverage['connect-logger.js'] = [];
  _$jscoverage['connect-logger.js'][1] = 0;
  _$jscoverage['connect-logger.js'][29] = 0;
  _$jscoverage['connect-logger.js'][30] = 0;
  _$jscoverage['connect-logger.js'][31] = 0;
  _$jscoverage['connect-logger.js'][32] = 0;
  _$jscoverage['connect-logger.js'][33] = 0;
  _$jscoverage['connect-logger.js'][35] = 0;
  _$jscoverage['connect-logger.js'][38] = 0;
  _$jscoverage['connect-logger.js'][43] = 0;
  _$jscoverage['connect-logger.js'][46] = 0;
  _$jscoverage['connect-logger.js'][49] = 0;
  _$jscoverage['connect-logger.js'][51] = 0;
  _$jscoverage['connect-logger.js'][53] = 0;
  _$jscoverage['connect-logger.js'][60] = 0;
  _$jscoverage['connect-logger.js'][63] = 0;
  _$jscoverage['connect-logger.js'][64] = 0;
  _$jscoverage['connect-logger.js'][65] = 0;
  _$jscoverage['connect-logger.js'][66] = 0;
  _$jscoverage['connect-logger.js'][67] = 0;
  _$jscoverage['connect-logger.js'][71] = 0;
  _$jscoverage['connect-logger.js'][72] = 0;
  _$jscoverage['connect-logger.js'][73] = 0;
  _$jscoverage['connect-logger.js'][74] = 0;
  _$jscoverage['connect-logger.js'][75] = 0;
  _$jscoverage['connect-logger.js'][76] = 0;
  _$jscoverage['connect-logger.js'][77] = 0;
  _$jscoverage['connect-logger.js'][79] = 0;
  _$jscoverage['connect-logger.js'][83] = 0;
  _$jscoverage['connect-logger.js'][98] = 0;
  _$jscoverage['connect-logger.js'][99] = 0;
  _$jscoverage['connect-logger.js'][110] = 0;
  _$jscoverage['connect-logger.js'][112] = 0;
  _$jscoverage['connect-logger.js'][145] = 0;
  _$jscoverage['connect-logger.js'][146] = 0;
  _$jscoverage['connect-logger.js'][147] = 0;
  _$jscoverage['connect-logger.js'][149] = 0;
  _$jscoverage['connect-logger.js'][150] = 0;
  _$jscoverage['connect-logger.js'][151] = 0;
  _$jscoverage['connect-logger.js'][152] = 0;
  _$jscoverage['connect-logger.js'][153] = 0;
  _$jscoverage['connect-logger.js'][154] = 0;
  _$jscoverage['connect-logger.js'][155] = 0;
  _$jscoverage['connect-logger.js'][156] = 0;
  _$jscoverage['connect-logger.js'][157] = 0;
  _$jscoverage['connect-logger.js'][159] = 0;
  _$jscoverage['connect-logger.js'][161] = 0;
  _$jscoverage['connect-logger.js'][162] = 0;
  _$jscoverage['connect-logger.js'][163] = 0;
  _$jscoverage['connect-logger.js'][167] = 0;
}
_$jscoverage['connect-logger.js'][1]++;
var levels = require("./levels");
_$jscoverage['connect-logger.js'][29]++;
function getLogger(logger4js, options) {
  _$jscoverage['connect-logger.js'][30]++;
  if ("object" == typeof options) {
    _$jscoverage['connect-logger.js'][31]++;
    options = options || {};
  }
  else {
    _$jscoverage['connect-logger.js'][32]++;
    if (options) {
      _$jscoverage['connect-logger.js'][33]++;
      options = {format: options};
    }
    else {
      _$jscoverage['connect-logger.js'][35]++;
      options = {};
    }
  }
  _$jscoverage['connect-logger.js'][38]++;
  var thislogger = logger4js, level = levels.toLevel(options.level, levels.INFO), fmt = options.format || ":remote-addr - - \":method :url HTTP/:http-version\" :status :content-length \":referrer\" \":user-agent\"", nolog = options.nolog? createNoLogCondition(options.nolog): null;
  _$jscoverage['connect-logger.js'][43]++;
  return (function (req, res, next) {
  _$jscoverage['connect-logger.js'][46]++;
  if (req._logging) {
    _$jscoverage['connect-logger.js'][46]++;
    return next();
  }
  _$jscoverage['connect-logger.js'][49]++;
  if (nolog && nolog.test(req.originalUrl)) {
    _$jscoverage['connect-logger.js'][49]++;
    return next();
  }
  _$jscoverage['connect-logger.js'][51]++;
  if (thislogger.isLevelEnabled(level)) {
    _$jscoverage['connect-logger.js'][53]++;
    var start = + new Date(), statusCode, writeHead = res.writeHead, end = res.end, url = req.originalUrl;
    _$jscoverage['connect-logger.js'][60]++;
    req._logging = true;
    _$jscoverage['connect-logger.js'][63]++;
    res.writeHead = (function (code, headers) {
  _$jscoverage['connect-logger.js'][64]++;
  res.writeHead = writeHead;
  _$jscoverage['connect-logger.js'][65]++;
  res.writeHead(code, headers);
  _$jscoverage['connect-logger.js'][66]++;
  res.__statusCode = statusCode = code;
  _$jscoverage['connect-logger.js'][67]++;
  res.__headers = headers || {};
});
    _$jscoverage['connect-logger.js'][71]++;
    res.end = (function (chunk, encoding) {
  _$jscoverage['connect-logger.js'][72]++;
  res.end = end;
  _$jscoverage['connect-logger.js'][73]++;
  res.end(chunk, encoding);
  _$jscoverage['connect-logger.js'][74]++;
  res.responseTime = + new Date() - start;
  _$jscoverage['connect-logger.js'][75]++;
  if ("function" == typeof fmt) {
    _$jscoverage['connect-logger.js'][76]++;
    var line = fmt(req, res, (function (str) {
  _$jscoverage['connect-logger.js'][76]++;
  return format(str, req, res);
}));
    _$jscoverage['connect-logger.js'][77]++;
    if (line) {
      _$jscoverage['connect-logger.js'][77]++;
      thislogger.log(level, line);
    }
  }
  else {
    _$jscoverage['connect-logger.js'][79]++;
    thislogger.log(level, format(fmt, req, res));
  }
});
    _$jscoverage['connect-logger.js'][83]++;
    next();
  }
});
}
_$jscoverage['connect-logger.js'][98]++;
function format(str, req, res) {
  _$jscoverage['connect-logger.js'][99]++;
  return str.replace(":url", req.originalUrl).replace(":method", req.method).replace(":status", res.__statusCode || res.statusCode).replace(":response-time", res.responseTime).replace(":date", new Date().toUTCString()).replace(":referrer", req.headers.referer || req.headers.referrer || "").replace(":http-version", req.httpVersionMajor + "." + req.httpVersionMinor).replace(":remote-addr", req.socket && (req.socket.remoteAddress || (req.socket.socket && req.socket.socket.remoteAddress))).replace(":user-agent", req.headers["user-agent"] || "").replace(":content-length", (res._headers && res._headers["content-length"]) || (res.__headers && res.__headers["Content-Length"]) || "-").replace(/:req\[([^\]]+)\]/g, (function (_, field) {
  _$jscoverage['connect-logger.js'][110]++;
  return req.headers[field.toLowerCase()];
})).replace(/:res\[([^\]]+)\]/g, (function (_, field) {
  _$jscoverage['connect-logger.js'][112]++;
  return res._headers? (res._headers[field.toLowerCase()] || res.__headers[field]): (res.__headers && res.__headers[field]);
}));
}
_$jscoverage['connect-logger.js'][145]++;
function createNoLogCondition(nolog, type) {
  _$jscoverage['connect-logger.js'][146]++;
  if (! nolog) {
    _$jscoverage['connect-logger.js'][146]++;
    return null;
  }
  _$jscoverage['connect-logger.js'][147]++;
  type = type || "";
  _$jscoverage['connect-logger.js'][149]++;
  if (nolog instanceof RegExp) {
    _$jscoverage['connect-logger.js'][150]++;
    if (type === "string") {
      _$jscoverage['connect-logger.js'][151]++;
      return nolog.source;
    }
    _$jscoverage['connect-logger.js'][152]++;
    return nolog;
  }
  else {
    _$jscoverage['connect-logger.js'][153]++;
    if (typeof nolog === "string") {
      _$jscoverage['connect-logger.js'][154]++;
      if (type === "string") {
        _$jscoverage['connect-logger.js'][155]++;
        return nolog;
      }
      _$jscoverage['connect-logger.js'][156]++;
      try {
        _$jscoverage['connect-logger.js'][157]++;
        return new RegExp(nolog);
      }
      catch (ex) {
        _$jscoverage['connect-logger.js'][159]++;
        return null;
      }
    }
    else {
      _$jscoverage['connect-logger.js'][161]++;
      if (nolog instanceof Array) {
        _$jscoverage['connect-logger.js'][162]++;
        var regexps = nolog.map((function (o) {
  _$jscoverage['connect-logger.js'][162]++;
  return createNoLogCondition(o, "string");
}));
        _$jscoverage['connect-logger.js'][163]++;
        return new RegExp(regexps.join("|"));
      }
    }
  }
}
_$jscoverage['connect-logger.js'][167]++;
exports.connectLogger = getLogger;
_$jscoverage['connect-logger.js'].source = ["var levels = require(\"./levels\");","/**"," * Log requests with the given `options` or a `format` string."," *"," * Options:"," *"," *   - `format`        Format string, see below for tokens"," *   - `level`         A log4js levels instance."," *"," * Tokens:"," *"," *   - `:req[header]` ex: `:req[Accept]`"," *   - `:res[header]` ex: `:res[Content-Length]`"," *   - `:http-version`"," *   - `:response-time`"," *   - `:remote-addr`"," *   - `:date`"," *   - `:method`"," *   - `:url`"," *   - `:referrer`"," *   - `:user-agent`"," *   - `:status`"," *"," * @param {String|Function|Object} format or options"," * @return {Function}"," * @api public"," */","","function getLogger(logger4js, options) {","    if ('object' == typeof options) {","\toptions = options || {};","    } else if (options) {","\toptions = { format: options };","    } else {","\toptions = {};","    }","","    var thislogger = logger4js","  , level = levels.toLevel(options.level, levels.INFO)","  , fmt = options.format || ':remote-addr - - \":method :url HTTP/:http-version\" :status :content-length \":referrer\" \":user-agent\"'","  , nolog = options.nolog ? createNoLogCondition(options.nolog) : null;","","    return function (req, res, next) {","","\t// mount safety","\tif (req._logging) return next();","","  // nologs","  if(nolog &amp;&amp; nolog.test(req.originalUrl)) return next();","","\tif (thislogger.isLevelEnabled(level)) {","","\t    var start = +new Date","\t  , statusCode","\t  , writeHead = res.writeHead","\t  , end = res.end","\t  , url = req.originalUrl;","","\t    // flag as logging","\t    req._logging = true;","","\t    // proxy for statusCode.","\t    res.writeHead = function(code, headers){","\t\tres.writeHead = writeHead;","\t\tres.writeHead(code, headers);","\t\tres.__statusCode = statusCode = code;","\t\tres.__headers = headers || {};","\t    };","","\t    // proxy end to output a line to the provided logger.","\t    res.end = function(chunk, encoding) {","\t\tres.end = end;","\t\tres.end(chunk, encoding);","\t\tres.responseTime = +new Date - start;","\t\tif ('function' == typeof fmt) {","\t\t    var line = fmt(req, res, function(str){ return format(str, req, res); });","\t\t    if (line) thislogger.log(level, line);","\t\t} else {","\t\t    thislogger.log(level, format(fmt, req, res));","\t\t}","\t    };","","\t    next();","\t}","    };","}","","/**"," * Return formatted log line."," *"," * @param  {String} str"," * @param  {IncomingMessage} req"," * @param  {ServerResponse} res"," * @return {String}"," * @api private"," */","","function format(str, req, res) {","    return str","      .replace(':url', req.originalUrl)","\t.replace(':method', req.method)","\t  .replace(':status', res.__statusCode || res.statusCode)","\t    .replace(':response-time', res.responseTime)","\t      .replace(':date', new Date().toUTCString())","\t\t.replace(':referrer', req.headers['referer'] || req.headers['referrer'] || '')","\t\t  .replace(':http-version', req.httpVersionMajor + '.' + req.httpVersionMinor)","\t\t    .replace(':remote-addr', req.socket &amp;&amp; (req.socket.remoteAddress || (req.socket.socket &amp;&amp; req.socket.socket.remoteAddress)))","\t\t      .replace(':user-agent', req.headers['user-agent'] || '')","                        .replace(':content-length', (res._headers &amp;&amp; res._headers['content-length']) || (res.__headers &amp;&amp; res.__headers['Content-Length']) || '-')","\t\t          .replace(/:req\\[([^\\]]+)\\]/g, function(_, field){ return req.headers[field.toLowerCase()]; })","\t\t            .replace(/:res\\[([^\\]]+)\\]/g, function(_, field){","\t\t                return res._headers","\t\t\t      ? (res._headers[field.toLowerCase()] || res.__headers[field])","\t\t\t      : (res.__headers &amp;&amp; res.__headers[field]);","\t\t            });","}","","/**"," * Return RegExp Object about nolog"," *"," * @param  {String} nolog"," * @return {RegExp}"," * @api private"," */","","/**"," * syntax"," *  1. String"," *   1.1 \"\\\\.gif\""," *         NOT LOGGING http://example.com/hoge.gif and http://example.com/hoge.gif?fuga"," *         LOGGING http://example.com/hoge.agif"," *   1.2 in \"\\\\.gif|\\\\.jpg$\""," *         NOT LOGGING http://example.com/hoge.gif and http://example.com/hoge.gif?fuga and http://example.com/hoge.jpg?fuga"," *         LOGGING http://example.com/hoge.agif, http://example.com/hoge.ajpg and http://example.com/hoge.jpg?hoge"," *   1.3 in \"\\\\.(gif|jpe?g|png)$\""," *         NOT LOGGING http://example.com/hoge.gif and http://example.com/hoge.jpeg"," *         LOGGING http://example.com/hoge.gif?uid=2 and http://example.com/hoge.jpg?pid=3"," *  2. RegExp"," *   2.1 in /\\.(gif|jpe?g|png)$/"," *         SAME AS 1.3"," *  3. Array"," *   3.1 [\"\\\\.jpg$\", \"\\\\.png\", \"\\\\.gif\"]"," *         SAME AS \"\\\\.jpg|\\\\.png|\\\\.gif\""," */","function createNoLogCondition(nolog, type) {","  if(!nolog) return null;","  type = type || '';","","  if(nolog instanceof RegExp){","    if(type === 'string')","      return nolog.source;","    return nolog;","  } else if(typeof nolog === 'string'){","    if(type === 'string')","      return nolog;","    try{","      return new RegExp(nolog);","    } catch (ex) {","      return null;","    }","  } else if(nolog instanceof Array){","    var regexps = nolog.map(function(o){ return createNoLogCondition(o, 'string')});","    return new RegExp(regexps.join('|'));","  }","}","","exports.connectLogger = getLogger;"];
